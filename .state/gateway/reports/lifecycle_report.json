{
  "generated_at": 1759529457.504371,
  "generated_at_iso": "2025-10-03T22:10:57.504371+00:00",
  "run": {
    "run_id": "8008773bc9f949feaec43cc6ab1b6722",
    "profile": "staging",
    "repo_head": "860da96c5199df140774d3bca902f2c7666c3cff"
  },
  "thresholds": {
    "stale_days": 30
  },
  "isolated": {
    "DesignDoc": [
      {
        "id": "DesignDoc:docs/API_APP_REFACTOR_PLAN.md",
        "path": "docs/API_APP_REFACTOR_PLAN.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/CONFIG_REFERENCE.md",
        "path": "docs/CONFIG_REFERENCE.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/DEPLOYMENT.md",
        "path": "docs/DEPLOYMENT.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/DRAFT_PR1.md",
        "path": "docs/DRAFT_PR1.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/GRAPH_API_DESIGN.md",
        "path": "docs/GRAPH_API_DESIGN.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/HYBRID_SEARCH_TODO.md",
        "path": "docs/HYBRID_SEARCH_TODO.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/KNOWLEDGE_MANAGEMENT.md",
        "path": "docs/KNOWLEDGE_MANAGEMENT.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/KNOWLEDGE_MANAGEMENT_DESIGN.md",
        "path": "docs/KNOWLEDGE_MANAGEMENT_DESIGN.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/KNOWLEDGE_MANAGEMENT_IMPLEMENTATION_PLAN.md",
        "path": "docs/KNOWLEDGE_MANAGEMENT_IMPLEMENTATION_PLAN.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/MCP_AGENT_PLAYBOOK.md",
        "path": "docs/MCP_AGENT_PLAYBOOK.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/MCP_INTEGRATION.md",
        "path": "docs/MCP_INTEGRATION.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/MCP_INTERFACE_SPEC.md",
        "path": "docs/MCP_INTERFACE_SPEC.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/MCP_RECIPES.md",
        "path": "docs/MCP_RECIPES.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/MCP_RECIPES_DESIGN.md",
        "path": "docs/MCP_RECIPES_DESIGN.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/OPERATIONS.md",
        "path": "docs/OPERATIONS.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/QUICK_START.md",
        "path": "docs/QUICK_START.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/RISK_MITIGATION_PLAN.md",
        "path": "docs/RISK_MITIGATION_PLAN.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/ROADMAP.md",
        "path": "docs/ROADMAP.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/SEARCH_SCORING_PLAN.md",
        "path": "docs/SEARCH_SCORING_PLAN.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/TESTING.md",
        "path": "docs/TESTING.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/UI_SPIKE_REPORT.md",
        "path": "docs/UI_SPIKE_REPORT.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/UPGRADE_ROLLBACK.md",
        "path": "docs/UPGRADE_ROLLBACK.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/archive/README.md",
        "path": "docs/archive/README.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/archive/WORK_PACKAGES.md",
        "path": "docs/archive/WORK_PACKAGES.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/dashboards/README.md",
        "path": "docs/dashboards/README.md",
        "name": null
      },
      {
        "id": "DesignDoc:docs/dashboards/gateway_overview.json",
        "path": "docs/dashboards/gateway_overview.json",
        "name": null
      },
      {
        "id": "DesignDoc:docs/subsystems.json",
        "path": "docs/subsystems.json",
        "name": null
      }
    ],
    "TestCase": [
      {
        "id": "TestCase:tests/__init__.py",
        "path": "tests/__init__.py",
        "name": null
      },
      {
        "id": "TestCase:tests/conftest.py",
        "path": "tests/conftest.py",
        "name": null
      },
      {
        "id": "TestCase:tests/fixtures/search/dataset.csv",
        "path": "tests/fixtures/search/dataset.csv",
        "name": null
      },
      {
        "id": "TestCase:tests/fixtures/search/model.json",
        "path": "tests/fixtures/search/model.json",
        "name": null
      },
      {
        "id": "TestCase:tests/mcp/test_server_tools.py",
        "path": "tests/mcp/test_server_tools.py",
        "name": null
      },
      {
        "id": "TestCase:tests/mcp/test_utils_files.py",
        "path": "tests/mcp/test_utils_files.py",
        "name": null
      },
      {
        "id": "TestCase:tests/playwright_server.py",
        "path": "tests/playwright_server.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_api_security.py",
        "path": "tests/test_api_security.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_app_smoke.py",
        "path": "tests/test_app_smoke.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_connection_managers.py",
        "path": "tests/test_connection_managers.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_coverage_report.py",
        "path": "tests/test_coverage_report.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_discovery_symbols.py",
        "path": "tests/test_discovery_symbols.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_graph_api.py",
        "path": "tests/test_graph_api.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_graph_auto_migrate.py",
        "path": "tests/test_graph_auto_migrate.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_graph_cli.py",
        "path": "tests/test_graph_cli.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_graph_database_validation.py",
        "path": "tests/test_graph_database_validation.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_graph_migrations.py",
        "path": "tests/test_graph_migrations.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_graph_service_startup.py",
        "path": "tests/test_graph_service_startup.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_graph_service_unit.py",
        "path": "tests/test_graph_service_unit.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_graph_validation.py",
        "path": "tests/test_graph_validation.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_ingest_cli.py",
        "path": "tests/test_ingest_cli.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_ingest_pipeline.py",
        "path": "tests/test_ingest_pipeline.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_km_watch.py",
        "path": "tests/test_km_watch.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_lifecycle_cli.py",
        "path": "tests/test_lifecycle_cli.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_lifecycle_report.py",
        "path": "tests/test_lifecycle_report.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_mcp_recipes.py",
        "path": "tests/test_mcp_recipes.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_mcp_smoke_recipes.py",
        "path": "tests/test_mcp_smoke_recipes.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_neo4j_writer.py",
        "path": "tests/test_neo4j_writer.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_qdrant_writer.py",
        "path": "tests/test_qdrant_writer.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_recipes_executor.py",
        "path": "tests/test_recipes_executor.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_release_scripts.py",
        "path": "tests/test_release_scripts.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_scheduler.py",
        "path": "tests/test_scheduler.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_search_api.py",
        "path": "tests/test_search_api.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_search_cli_show_weights.py",
        "path": "tests/test_search_cli_show_weights.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_search_evaluation.py",
        "path": "tests/test_search_evaluation.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_search_exporter.py",
        "path": "tests/test_search_exporter.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_search_feedback.py",
        "path": "tests/test_search_feedback.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_search_maintenance.py",
        "path": "tests/test_search_maintenance.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_search_profiles.py",
        "path": "tests/test_search_profiles.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_search_service.py",
        "path": "tests/test_search_service.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_settings_defaults.py",
        "path": "tests/test_settings_defaults.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_symbol_extraction.py",
        "path": "tests/test_symbol_extraction.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_symbol_linking.py",
        "path": "tests/test_symbol_linking.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_tracing.py",
        "path": "tests/test_tracing.py",
        "name": null
      },
      {
        "id": "TestCase:tests/test_ui_routes.py",
        "path": "tests/test_ui_routes.py",
        "name": null
      }
    ]
  },
  "stale_docs": [],
  "missing_tests": [],
  "removed_artifacts": [],
  "symbol_tests": [
    {
      "symbol_id": "tests/conftest.py::_NullDriver",
      "qualified_name": "_NullDriver",
      "name": "_NullDriver",
      "source_path": "tests/conftest.py",
      "tests": [
        "tests/conftest.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/conftest.py::_NullDriver.close",
      "qualified_name": "_NullDriver.close",
      "name": "_NullDriver.close",
      "source_path": "tests/conftest.py",
      "tests": [
        "tests/conftest.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/conftest.py::_NullDriver.session",
      "qualified_name": "_NullDriver.session",
      "name": "_NullDriver.session",
      "source_path": "tests/conftest.py",
      "tests": [
        "tests/conftest.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/conftest.py::_NullSession",
      "qualified_name": "_NullSession",
      "name": "_NullSession",
      "source_path": "tests/conftest.py",
      "tests": [
        "tests/conftest.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/conftest.py::_NullSession.__enter__",
      "qualified_name": "_NullSession.__enter__",
      "name": "_NullSession.__enter__",
      "source_path": "tests/conftest.py",
      "tests": [
        "tests/conftest.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/conftest.py::_NullSession.__exit__",
      "qualified_name": "_NullSession.__exit__",
      "name": "_NullSession.__exit__",
      "source_path": "tests/conftest.py",
      "tests": [
        "tests/conftest.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/conftest.py::_NullSession.__init__",
      "qualified_name": "_NullSession.__init__",
      "name": "_NullSession.__init__",
      "source_path": "tests/conftest.py",
      "tests": [
        "tests/conftest.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/conftest.py::_NullSession.close",
      "qualified_name": "_NullSession.close",
      "name": "_NullSession.close",
      "source_path": "tests/conftest.py",
      "tests": [
        "tests/conftest.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/conftest.py::_NullSession.execute_read",
      "qualified_name": "_NullSession.execute_read",
      "name": "_NullSession.execute_read",
      "source_path": "tests/conftest.py",
      "tests": [
        "tests/conftest.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/conftest.py::_NullSession.run",
      "qualified_name": "_NullSession.run",
      "name": "_NullSession.run",
      "source_path": "tests/conftest.py",
      "tests": [
        "tests/conftest.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/conftest.py::_StubEmbedder",
      "qualified_name": "_StubEmbedder",
      "name": "_StubEmbedder",
      "source_path": "tests/conftest.py",
      "tests": [
        "tests/conftest.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/conftest.py::_StubEmbedder.__init__",
      "qualified_name": "_StubEmbedder.__init__",
      "name": "_StubEmbedder.__init__",
      "source_path": "tests/conftest.py",
      "tests": [
        "tests/conftest.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/conftest.py::_StubEmbedder.encode",
      "qualified_name": "_StubEmbedder.encode",
      "name": "_StubEmbedder.encode",
      "source_path": "tests/conftest.py",
      "tests": [
        "tests/conftest.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/conftest.py::_StubSentenceTransformer",
      "qualified_name": "_StubSentenceTransformer",
      "name": "_StubSentenceTransformer",
      "source_path": "tests/conftest.py",
      "tests": [
        "tests/conftest.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/conftest.py::_StubSentenceTransformer.__init__",
      "qualified_name": "_StubSentenceTransformer.__init__",
      "name": "_StubSentenceTransformer.__init__",
      "source_path": "tests/conftest.py",
      "tests": [
        "tests/conftest.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/conftest.py::_StubSentenceTransformer.encode",
      "qualified_name": "_StubSentenceTransformer.encode",
      "name": "_StubSentenceTransformer.encode",
      "source_path": "tests/conftest.py",
      "tests": [
        "tests/conftest.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/conftest.py::_StubSentenceTransformer.get_sentence_embedding_dimension",
      "qualified_name": "_StubSentenceTransformer.get_sentence_embedding_dimension",
      "name": "_StubSentenceTransformer.get_sentence_embedding_dimension",
      "source_path": "tests/conftest.py",
      "tests": [
        "tests/conftest.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/conftest.py::_fake_driver",
      "qualified_name": "_fake_driver",
      "name": "_fake_driver",
      "source_path": "tests/conftest.py",
      "tests": [
        "tests/conftest.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/conftest.py::default_authentication_env",
      "qualified_name": "default_authentication_env",
      "name": "default_authentication_env",
      "source_path": "tests/conftest.py",
      "tests": [
        "tests/conftest.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/conftest.py::disable_real_graph_driver",
      "qualified_name": "disable_real_graph_driver",
      "name": "disable_real_graph_driver",
      "source_path": "tests/conftest.py",
      "tests": [
        "tests/conftest.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/conftest.py::neo4j_test_environment",
      "qualified_name": "neo4j_test_environment",
      "name": "neo4j_test_environment",
      "source_path": "tests/conftest.py",
      "tests": [
        "tests/conftest.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/conftest.py::pytest_collection_modifyitems",
      "qualified_name": "pytest_collection_modifyitems",
      "name": "pytest_collection_modifyitems",
      "source_path": "tests/conftest.py",
      "tests": [
        "tests/conftest.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::StubClient",
      "qualified_name": "StubClient",
      "name": "StubClient",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::StubClient.audit_history",
      "qualified_name": "StubClient.audit_history",
      "name": "StubClient.audit_history",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::StubClient.coverage_summary",
      "qualified_name": "StubClient.coverage_summary",
      "name": "StubClient.coverage_summary",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::StubClient.graph_node",
      "qualified_name": "StubClient.graph_node",
      "name": "StubClient.graph_node",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::StubClient.graph_search",
      "qualified_name": "StubClient.graph_search",
      "name": "StubClient.graph_search",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::StubClient.graph_subsystem",
      "qualified_name": "StubClient.graph_subsystem",
      "name": "StubClient.graph_subsystem",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::StubClient.lifecycle_report",
      "qualified_name": "StubClient.lifecycle_report",
      "name": "StubClient.lifecycle_report",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::StubClient.search",
      "qualified_name": "StubClient.search",
      "name": "StubClient.search",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::StubClient.symbol_tests",
      "qualified_name": "StubClient.symbol_tests",
      "name": "StubClient.symbol_tests",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::_counter_value",
      "qualified_name": "_counter_value",
      "name": "_counter_value",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::_histogram_sum",
      "qualified_name": "_histogram_sum",
      "name": "_histogram_sum",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::_reset_mcp_metrics",
      "qualified_name": "_reset_mcp_metrics",
      "name": "_reset_mcp_metrics",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::_storetext_counter",
      "qualified_name": "_storetext_counter",
      "name": "_storetext_counter",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::_tool_fn",
      "qualified_name": "_tool_fn",
      "name": "_tool_fn",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::_upload_counter",
      "qualified_name": "_upload_counter",
      "name": "_upload_counter",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::fake_trigger_ingest",
      "qualified_name": "fake_trigger_ingest",
      "name": "fake_trigger_ingest",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::mcp_server",
      "qualified_name": "mcp_server",
      "name": "mcp_server",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::stub_record_feedback",
      "qualified_name": "stub_record_feedback",
      "name": "stub_record_feedback",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::stub_spec",
      "qualified_name": "stub_spec",
      "name": "stub_spec",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::stub_trigger_backup",
      "qualified_name": "stub_trigger_backup",
      "name": "stub_trigger_backup",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::stub_trigger_ingest",
      "qualified_name": "stub_trigger_ingest",
      "name": "stub_trigger_ingest",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::test_backup_trigger",
      "qualified_name": "test_backup_trigger",
      "name": "test_backup_trigger",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::test_coverage_summary_records_metrics",
      "qualified_name": "test_coverage_summary_records_metrics",
      "name": "test_coverage_summary_records_metrics",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::test_feedback_submit",
      "qualified_name": "test_feedback_submit",
      "name": "test_feedback_submit",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::test_graph_tools_delegate_to_client_and_record_metrics",
      "qualified_name": "test_graph_tools_delegate_to_client_and_record_metrics",
      "name": "test_graph_tools_delegate_to_client_and_record_metrics",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::test_ingest_status_handles_missing_history",
      "qualified_name": "test_ingest_status_handles_missing_history",
      "name": "test_ingest_status_handles_missing_history",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::test_ingest_trigger_failure_records_metrics",
      "qualified_name": "test_ingest_trigger_failure_records_metrics",
      "name": "test_ingest_trigger_failure_records_metrics",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::test_ingest_trigger_succeeds",
      "qualified_name": "test_ingest_trigger_succeeds",
      "name": "test_ingest_trigger_succeeds",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::test_km_graph_tests_of_gateway_error_records_failure",
      "qualified_name": "test_km_graph_tests_of_gateway_error_records_failure",
      "name": "test_km_graph_tests_of_gateway_error_records_failure",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::test_km_help_lists_tools_and_provides_details",
      "qualified_name": "test_km_help_lists_tools_and_provides_details",
      "name": "test_km_help_lists_tools_and_provides_details",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::test_km_search_gateway_error_records_failure",
      "qualified_name": "test_km_search_gateway_error_records_failure",
      "name": "test_km_search_gateway_error_records_failure",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::test_km_search_success_records_metrics",
      "qualified_name": "test_km_search_success_records_metrics",
      "name": "test_km_search_success_records_metrics",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::test_km_search_symbol_flags_merge_filters",
      "qualified_name": "test_km_search_symbol_flags_merge_filters",
      "name": "test_km_search_symbol_flags_merge_filters",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::test_km_storetext_creates_document_with_front_matter",
      "qualified_name": "test_km_storetext_creates_document_with_front_matter",
      "name": "test_km_storetext_creates_document_with_front_matter",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::test_km_storetext_requires_admin_token",
      "qualified_name": "test_km_storetext_requires_admin_token",
      "name": "test_km_storetext_requires_admin_token",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::test_km_storetext_requires_content",
      "qualified_name": "test_km_storetext_requires_content",
      "name": "test_km_storetext_requires_content",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::test_km_storetext_triggers_ingest_when_requested",
      "qualified_name": "test_km_storetext_triggers_ingest_when_requested",
      "name": "test_km_storetext_triggers_ingest_when_requested",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::test_km_upload_copies_file_and_records_metrics",
      "qualified_name": "test_km_upload_copies_file_and_records_metrics",
      "name": "test_km_upload_copies_file_and_records_metrics",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::test_km_upload_missing_source_raises",
      "qualified_name": "test_km_upload_missing_source_raises",
      "name": "test_km_upload_missing_source_raises",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::test_km_upload_requires_admin_token",
      "qualified_name": "test_km_upload_requires_admin_token",
      "name": "test_km_upload_requires_admin_token",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::test_km_upload_triggers_ingest_when_requested",
      "qualified_name": "test_km_upload_triggers_ingest_when_requested",
      "name": "test_km_upload_triggers_ingest_when_requested",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::test_lifecycle_report_records_metrics",
      "qualified_name": "test_lifecycle_report_records_metrics",
      "name": "test_lifecycle_report_records_metrics",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::test_mcp_smoke_run",
      "qualified_name": "test_mcp_smoke_run",
      "name": "test_mcp_smoke_run",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_server_tools.py::test_metrics_export_includes_tool_labels",
      "qualified_name": "test_metrics_export_includes_tool_labels",
      "name": "test_metrics_export_includes_tool_labels",
      "source_path": "tests/mcp/test_server_tools.py",
      "tests": [
        "tests/mcp/test_server_tools.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_utils_files.py::test_copy_into_root_prevents_traversal",
      "qualified_name": "test_copy_into_root_prevents_traversal",
      "name": "test_copy_into_root_prevents_traversal",
      "source_path": "tests/mcp/test_utils_files.py",
      "tests": [
        "tests/mcp/test_utils_files.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_utils_files.py::test_slugify_generates_fallback_when_empty",
      "qualified_name": "test_slugify_generates_fallback_when_empty",
      "name": "test_slugify_generates_fallback_when_empty",
      "source_path": "tests/mcp/test_utils_files.py",
      "tests": [
        "tests/mcp/test_utils_files.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_utils_files.py::test_sweep_documents_copies_supported_files",
      "qualified_name": "test_sweep_documents_copies_supported_files",
      "name": "test_sweep_documents_copies_supported_files",
      "source_path": "tests/mcp/test_utils_files.py",
      "tests": [
        "tests/mcp/test_utils_files.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_utils_files.py::test_sweep_documents_dry_run_reports_actions",
      "qualified_name": "test_sweep_documents_dry_run_reports_actions",
      "name": "test_sweep_documents_dry_run_reports_actions",
      "source_path": "tests/mcp/test_utils_files.py",
      "tests": [
        "tests/mcp/test_utils_files.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/mcp/test_utils_files.py::test_write_text_document_requires_content",
      "qualified_name": "test_write_text_document_requires_content",
      "name": "test_write_text_document_requires_content",
      "source_path": "tests/mcp/test_utils_files.py",
      "tests": [
        "tests/mcp/test_utils_files.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/playwright_server.py::_configure_environment",
      "qualified_name": "_configure_environment",
      "name": "_configure_environment",
      "source_path": "tests/playwright_server.py",
      "tests": [
        "tests/playwright_server.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/playwright_server.py::_handle_stop",
      "qualified_name": "_handle_stop",
      "name": "_handle_stop",
      "source_path": "tests/playwright_server.py",
      "tests": [
        "tests/playwright_server.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/playwright_server.py::_prepare_state",
      "qualified_name": "_prepare_state",
      "name": "_prepare_state",
      "source_path": "tests/playwright_server.py",
      "tests": [
        "tests/playwright_server.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/playwright_server.py::_write_json",
      "qualified_name": "_write_json",
      "name": "_write_json",
      "source_path": "tests/playwright_server.py",
      "tests": [
        "tests/playwright_server.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/playwright_server.py::main",
      "qualified_name": "main",
      "name": "main",
      "source_path": "tests/playwright_server.py",
      "tests": [
        "tests/playwright_server.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_exporter.py::test_discover_feedback_logs_orders_oldest_first",
      "qualified_name": "test_discover_feedback_logs_orders_oldest_first",
      "name": "test_discover_feedback_logs_orders_oldest_first",
      "source_path": "tests/search/test_exporter.py",
      "tests": [
        "tests/search/test_exporter.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_exporter.py::test_export_feedback_logs_combines_rotations",
      "qualified_name": "test_export_feedback_logs_combines_rotations",
      "name": "test_export_feedback_logs_combines_rotations",
      "source_path": "tests/search/test_exporter.py",
      "tests": [
        "tests/search/test_exporter.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_exporter.py::test_export_training_data_includes_rotations",
      "qualified_name": "test_export_training_data_includes_rotations",
      "name": "test_export_training_data_includes_rotations",
      "source_path": "tests/search/test_exporter.py",
      "tests": [
        "tests/search/test_exporter.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_filtering.py::test_build_filter_state_normalises_filters",
      "qualified_name": "test_build_filter_state_normalises_filters",
      "name": "test_build_filter_state_normalises_filters",
      "source_path": "tests/search/test_filtering.py",
      "tests": [
        "tests/search/test_filtering.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_filtering.py::test_parse_iso_datetime_handles_multiple_formats",
      "qualified_name": "test_parse_iso_datetime_handles_multiple_formats",
      "name": "test_parse_iso_datetime_handles_multiple_formats",
      "source_path": "tests/search/test_filtering.py",
      "tests": [
        "tests/search/test_filtering.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_filtering.py::test_payload_passes_filters_checks_all_fields",
      "qualified_name": "test_payload_passes_filters_checks_all_fields",
      "name": "test_payload_passes_filters_checks_all_fields",
      "source_path": "tests/search/test_filtering.py",
      "tests": [
        "tests/search/test_filtering.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_filtering.py::test_payload_symbol_filters",
      "qualified_name": "test_payload_symbol_filters",
      "name": "test_payload_symbol_filters",
      "source_path": "tests/search/test_filtering.py",
      "tests": [
        "tests/search/test_filtering.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_graph_enricher.py::DummyGraphService",
      "qualified_name": "DummyGraphService",
      "name": "DummyGraphService",
      "source_path": "tests/search/test_graph_enricher.py",
      "tests": [
        "tests/search/test_graph_enricher.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_graph_enricher.py::DummyGraphService.__init__",
      "qualified_name": "DummyGraphService.__init__",
      "name": "DummyGraphService.__init__",
      "source_path": "tests/search/test_graph_enricher.py",
      "tests": [
        "tests/search/test_graph_enricher.py",
        "tests/search/test_vector_retriever.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_graph_enricher.py::DummyGraphService.get_node",
      "qualified_name": "DummyGraphService.get_node",
      "name": "DummyGraphService.get_node",
      "source_path": "tests/search/test_graph_enricher.py",
      "tests": [
        "tests/search/test_graph_enricher.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_graph_enricher.py::DummyGraphService.get_subsystem",
      "qualified_name": "DummyGraphService.get_subsystem",
      "name": "DummyGraphService.get_subsystem",
      "source_path": "tests/search/test_graph_enricher.py",
      "tests": [
        "tests/search/test_graph_enricher.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_graph_enricher.py::DummyGraphService.run_cypher",
      "qualified_name": "DummyGraphService.run_cypher",
      "name": "DummyGraphService.run_cypher",
      "source_path": "tests/search/test_graph_enricher.py",
      "tests": [
        "tests/search/test_graph_enricher.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_graph_enricher.py::DummyGraphService.search",
      "qualified_name": "DummyGraphService.search",
      "name": "DummyGraphService.search",
      "source_path": "tests/search/test_graph_enricher.py",
      "tests": [
        "tests/search/test_graph_enricher.py",
        "tests/search/test_vector_retriever.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_graph_enricher.py::DummyGraphService.shortest_path_depth",
      "qualified_name": "DummyGraphService.shortest_path_depth",
      "name": "DummyGraphService.shortest_path_depth",
      "source_path": "tests/search/test_graph_enricher.py",
      "tests": [
        "tests/search/test_graph_enricher.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_graph_enricher.py::_metric_value",
      "qualified_name": "_metric_value",
      "name": "_metric_value",
      "source_path": "tests/search/test_graph_enricher.py",
      "tests": [
        "tests/search/test_graph_enricher.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_graph_enricher.py::graph_payload",
      "qualified_name": "graph_payload",
      "name": "graph_payload",
      "source_path": "tests/search/test_graph_enricher.py",
      "tests": [
        "tests/search/test_graph_enricher.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_graph_enricher.py::graph_response",
      "qualified_name": "graph_response",
      "name": "graph_response",
      "source_path": "tests/search/test_graph_enricher.py",
      "tests": [
        "tests/search/test_graph_enricher.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_graph_enricher.py::test_graph_enricher_caches_results",
      "qualified_name": "test_graph_enricher_caches_results",
      "name": "test_graph_enricher_caches_results",
      "source_path": "tests/search/test_graph_enricher.py",
      "tests": [
        "tests/search/test_graph_enricher.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_graph_enricher.py::test_graph_enricher_respects_result_budget",
      "qualified_name": "test_graph_enricher_respects_result_budget",
      "name": "test_graph_enricher_respects_result_budget",
      "source_path": "tests/search/test_graph_enricher.py",
      "tests": [
        "tests/search/test_graph_enricher.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_graph_enricher.py::test_graph_enricher_respects_time_budget",
      "qualified_name": "test_graph_enricher_respects_time_budget",
      "name": "test_graph_enricher_respects_time_budget",
      "source_path": "tests/search/test_graph_enricher.py",
      "tests": [
        "tests/search/test_graph_enricher.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_ml_scorer.py::_artifact",
      "qualified_name": "_artifact",
      "name": "_artifact",
      "source_path": "tests/search/test_ml_scorer.py",
      "tests": [
        "tests/search/test_ml_scorer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_ml_scorer.py::test_model_scorer_handles_missing_features_with_defaults",
      "qualified_name": "test_model_scorer_handles_missing_features_with_defaults",
      "name": "test_model_scorer_handles_missing_features_with_defaults",
      "source_path": "tests/search/test_ml_scorer.py",
      "tests": [
        "tests/search/test_ml_scorer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_ml_scorer.py::test_model_scorer_produces_contributions",
      "qualified_name": "test_model_scorer_produces_contributions",
      "name": "test_model_scorer_produces_contributions",
      "source_path": "tests/search/test_ml_scorer.py",
      "tests": [
        "tests/search/test_ml_scorer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_scoring.py::test_compute_freshness_days_prefers_chunk_timestamp",
      "qualified_name": "test_compute_freshness_days_prefers_chunk_timestamp",
      "name": "test_compute_freshness_days_prefers_chunk_timestamp",
      "source_path": "tests/search/test_scoring.py",
      "tests": [
        "tests/search/test_scoring.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_scoring.py::test_heuristic_scorer_applies_graph_signals",
      "qualified_name": "test_heuristic_scorer_applies_graph_signals",
      "name": "test_heuristic_scorer_applies_graph_signals",
      "source_path": "tests/search/test_scoring.py",
      "tests": [
        "tests/search/test_scoring.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_vector_retriever.py::DummyEmbedder",
      "qualified_name": "DummyEmbedder",
      "name": "DummyEmbedder",
      "source_path": "tests/search/test_vector_retriever.py",
      "tests": [
        "tests/search/test_vector_retriever.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_vector_retriever.py::DummyEmbedder.__init__",
      "qualified_name": "DummyEmbedder.__init__",
      "name": "DummyEmbedder.__init__",
      "source_path": "tests/search/test_vector_retriever.py",
      "tests": [
        "tests/search/test_graph_enricher.py",
        "tests/search/test_vector_retriever.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_vector_retriever.py::DummyEmbedder.encode",
      "qualified_name": "DummyEmbedder.encode",
      "name": "DummyEmbedder.encode",
      "source_path": "tests/search/test_vector_retriever.py",
      "tests": [
        "tests/search/test_vector_retriever.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_vector_retriever.py::DummyQdrantClient",
      "qualified_name": "DummyQdrantClient",
      "name": "DummyQdrantClient",
      "source_path": "tests/search/test_vector_retriever.py",
      "tests": [
        "tests/search/test_vector_retriever.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_vector_retriever.py::DummyQdrantClient.__init__",
      "qualified_name": "DummyQdrantClient.__init__",
      "name": "DummyQdrantClient.__init__",
      "source_path": "tests/search/test_vector_retriever.py",
      "tests": [
        "tests/search/test_graph_enricher.py",
        "tests/search/test_vector_retriever.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_vector_retriever.py::DummyQdrantClient.search",
      "qualified_name": "DummyQdrantClient.search",
      "name": "DummyQdrantClient.search",
      "source_path": "tests/search/test_vector_retriever.py",
      "tests": [
        "tests/search/test_graph_enricher.py",
        "tests/search/test_vector_retriever.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_vector_retriever.py::failure_callback",
      "qualified_name": "failure_callback",
      "name": "failure_callback",
      "source_path": "tests/search/test_vector_retriever.py",
      "tests": [
        "tests/search/test_vector_retriever.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_vector_retriever.py::test_vector_retriever_encode_failure_propagates",
      "qualified_name": "test_vector_retriever_encode_failure_propagates",
      "name": "test_vector_retriever_encode_failure_propagates",
      "source_path": "tests/search/test_vector_retriever.py",
      "tests": [
        "tests/search/test_vector_retriever.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_vector_retriever.py::test_vector_retriever_failure_calls_callback",
      "qualified_name": "test_vector_retriever_failure_calls_callback",
      "name": "test_vector_retriever_failure_calls_callback",
      "source_path": "tests/search/test_vector_retriever.py",
      "tests": [
        "tests/search/test_vector_retriever.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/search/test_vector_retriever.py::test_vector_retriever_returns_hits",
      "qualified_name": "test_vector_retriever_returns_hits",
      "name": "test_vector_retriever_returns_hits",
      "source_path": "tests/search/test_vector_retriever.py",
      "tests": [
        "tests/search/test_vector_retriever.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_api_security.py::_Dummy",
      "qualified_name": "_Dummy",
      "name": "_Dummy",
      "source_path": "tests/test_api_security.py",
      "tests": [
        "tests/test_api_security.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_api_security.py::_Dummy.search",
      "qualified_name": "_Dummy.search",
      "name": "_Dummy.search",
      "source_path": "tests/test_api_security.py",
      "tests": [
        "tests/test_api_security.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_api_security.py::_dummy_search_service",
      "qualified_name": "_dummy_search_service",
      "name": "_dummy_search_service",
      "source_path": "tests/test_api_security.py",
      "tests": [
        "tests/test_api_security.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_api_security.py::reset_settings_cache",
      "qualified_name": "reset_settings_cache",
      "name": "reset_settings_cache",
      "source_path": "tests/test_api_security.py",
      "tests": [
        "tests/test_api_security.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_api_security.py::test_audit_history_limit_clamped",
      "qualified_name": "test_audit_history_limit_clamped",
      "name": "test_audit_history_limit_clamped",
      "source_path": "tests/test_api_security.py",
      "tests": [
        "tests/test_api_security.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_api_security.py::test_audit_history_limit_too_low_normalized",
      "qualified_name": "test_audit_history_limit_too_low_normalized",
      "name": "test_audit_history_limit_too_low_normalized",
      "source_path": "tests/test_api_security.py",
      "tests": [
        "tests/test_api_security.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_api_security.py::test_audit_requires_token",
      "qualified_name": "test_audit_requires_token",
      "name": "test_audit_requires_token",
      "source_path": "tests/test_api_security.py",
      "tests": [
        "tests/test_api_security.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_api_security.py::test_coverage_endpoint",
      "qualified_name": "test_coverage_endpoint",
      "name": "test_coverage_endpoint",
      "source_path": "tests/test_api_security.py",
      "tests": [
        "tests/test_api_security.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_api_security.py::test_coverage_missing_report",
      "qualified_name": "test_coverage_missing_report",
      "name": "test_coverage_missing_report",
      "source_path": "tests/test_api_security.py",
      "tests": [
        "tests/test_api_security.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_api_security.py::test_rate_limiting",
      "qualified_name": "test_rate_limiting",
      "name": "test_rate_limiting",
      "source_path": "tests/test_api_security.py",
      "tests": [
        "tests/test_api_security.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_api_security.py::test_rate_limiting_search",
      "qualified_name": "test_rate_limiting_search",
      "name": "test_rate_limiting_search",
      "source_path": "tests/test_api_security.py",
      "tests": [
        "tests/test_api_security.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_api_security.py::test_secure_mode_requires_custom_neo4j_password",
      "qualified_name": "test_secure_mode_requires_custom_neo4j_password",
      "name": "test_secure_mode_requires_custom_neo4j_password",
      "source_path": "tests/test_api_security.py",
      "tests": [
        "tests/test_api_security.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_api_security.py::test_secure_mode_without_admin_token_fails",
      "qualified_name": "test_secure_mode_without_admin_token_fails",
      "name": "test_secure_mode_without_admin_token_fails",
      "source_path": "tests/test_api_security.py",
      "tests": [
        "tests/test_api_security.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_api_security.py::test_startup_logs_configuration",
      "qualified_name": "test_startup_logs_configuration",
      "name": "test_startup_logs_configuration",
      "source_path": "tests/test_api_security.py",
      "tests": [
        "tests/test_api_security.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::FailingNeo4jManager",
      "qualified_name": "FailingNeo4jManager",
      "name": "FailingNeo4jManager",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::FailingNeo4jManager.__init__",
      "qualified_name": "FailingNeo4jManager.__init__",
      "name": "FailingNeo4jManager.__init__",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::FailingNeo4jManager.describe",
      "qualified_name": "FailingNeo4jManager.describe",
      "name": "FailingNeo4jManager.describe",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::FailingNeo4jManager.get_write_driver",
      "qualified_name": "FailingNeo4jManager.get_write_driver",
      "name": "FailingNeo4jManager.get_write_driver",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::FailingNeo4jManager.mark_failure",
      "qualified_name": "FailingNeo4jManager.mark_failure",
      "name": "FailingNeo4jManager.mark_failure",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::StubNeo4jManager",
      "qualified_name": "StubNeo4jManager",
      "name": "StubNeo4jManager",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::StubNeo4jManager.__init__",
      "qualified_name": "StubNeo4jManager.__init__",
      "name": "StubNeo4jManager.__init__",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::StubNeo4jManager.describe",
      "qualified_name": "StubNeo4jManager.describe",
      "name": "StubNeo4jManager.describe",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::StubNeo4jManager.get_readonly_driver",
      "qualified_name": "StubNeo4jManager.get_readonly_driver",
      "name": "StubNeo4jManager.get_readonly_driver",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::StubNeo4jManager.get_write_driver",
      "qualified_name": "StubNeo4jManager.get_write_driver",
      "name": "StubNeo4jManager.get_write_driver",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::StubNeo4jManager.heartbeat",
      "qualified_name": "StubNeo4jManager.heartbeat",
      "name": "StubNeo4jManager.heartbeat",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::StubNeo4jManager.mark_failure",
      "qualified_name": "StubNeo4jManager.mark_failure",
      "name": "StubNeo4jManager.mark_failure",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::StubQdrantManager",
      "qualified_name": "StubQdrantManager",
      "name": "StubQdrantManager",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::StubQdrantManager.__init__",
      "qualified_name": "StubQdrantManager.__init__",
      "name": "StubQdrantManager.__init__",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::StubQdrantManager.describe",
      "qualified_name": "StubQdrantManager.describe",
      "name": "StubQdrantManager.describe",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::StubQdrantManager.get_client",
      "qualified_name": "StubQdrantManager.get_client",
      "name": "StubQdrantManager.get_client",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::StubQdrantManager.heartbeat",
      "qualified_name": "StubQdrantManager.heartbeat",
      "name": "StubQdrantManager.heartbeat",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::StubQdrantManager.mark_failure",
      "qualified_name": "StubQdrantManager.mark_failure",
      "name": "StubQdrantManager.mark_failure",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::_stub_connection_managers",
      "qualified_name": "_stub_connection_managers",
      "name": "_stub_connection_managers",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::reset_settings_cache",
      "qualified_name": "reset_settings_cache",
      "name": "reset_settings_cache",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::test_health_endpoint_ok_when_artifacts_present",
      "qualified_name": "test_health_endpoint_ok_when_artifacts_present",
      "name": "test_health_endpoint_ok_when_artifacts_present",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::test_health_endpoint_reports_diagnostics",
      "qualified_name": "test_health_endpoint_reports_diagnostics",
      "name": "test_health_endpoint_reports_diagnostics",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::test_lifecycle_history_endpoint",
      "qualified_name": "test_lifecycle_history_endpoint",
      "name": "test_lifecycle_history_endpoint",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::test_logs_warning_when_neo4j_auth_disabled",
      "qualified_name": "test_logs_warning_when_neo4j_auth_disabled",
      "name": "test_logs_warning_when_neo4j_auth_disabled",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::test_ready_endpoint_degraded_when_dependency_down_and_strict_disabled",
      "qualified_name": "test_ready_endpoint_degraded_when_dependency_down_and_strict_disabled",
      "name": "test_ready_endpoint_degraded_when_dependency_down_and_strict_disabled",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::test_ready_endpoint_returns_ready",
      "qualified_name": "test_ready_endpoint_returns_ready",
      "name": "test_ready_endpoint_returns_ready",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::test_requires_non_default_neo4j_password_when_auth_enabled",
      "qualified_name": "test_requires_non_default_neo4j_password_when_auth_enabled",
      "name": "test_requires_non_default_neo4j_password_when_auth_enabled",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::test_requires_non_empty_neo4j_password_when_auth_enabled",
      "qualified_name": "test_requires_non_empty_neo4j_password_when_auth_enabled",
      "name": "test_requires_non_empty_neo4j_password_when_auth_enabled",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_app_smoke.py::test_startup_fails_when_dependency_unavailable_by_default",
      "qualified_name": "test_startup_fails_when_dependency_unavailable_by_default",
      "name": "test_startup_fails_when_dependency_unavailable_by_default",
      "source_path": "tests/test_app_smoke.py",
      "tests": [
        "tests/test_app_smoke.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_connection_managers.py::StubClient",
      "qualified_name": "StubClient",
      "name": "StubClient",
      "source_path": "tests/test_connection_managers.py",
      "tests": [
        "tests/test_connection_managers.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_connection_managers.py::StubClient.__init__",
      "qualified_name": "StubClient.__init__",
      "name": "StubClient.__init__",
      "source_path": "tests/test_connection_managers.py",
      "tests": [
        "tests/test_connection_managers.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_connection_managers.py::StubClient.get_collections",
      "qualified_name": "StubClient.get_collections",
      "name": "StubClient.get_collections",
      "source_path": "tests/test_connection_managers.py",
      "tests": [
        "tests/test_connection_managers.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_connection_managers.py::_make_dummy_driver",
      "qualified_name": "_make_dummy_driver",
      "name": "_make_dummy_driver",
      "source_path": "tests/test_connection_managers.py",
      "tests": [
        "tests/test_connection_managers.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_connection_managers.py::_reset_metric",
      "qualified_name": "_reset_metric",
      "name": "_reset_metric",
      "source_path": "tests/test_connection_managers.py",
      "tests": [
        "tests/test_connection_managers.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_connection_managers.py::fake_driver",
      "qualified_name": "fake_driver",
      "name": "fake_driver",
      "source_path": "tests/test_connection_managers.py",
      "tests": [
        "tests/test_connection_managers.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_connection_managers.py::make_settings",
      "qualified_name": "make_settings",
      "name": "make_settings",
      "source_path": "tests/test_connection_managers.py",
      "tests": [
        "tests/test_connection_managers.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_connection_managers.py::reset_metrics",
      "qualified_name": "reset_metrics",
      "name": "reset_metrics",
      "source_path": "tests/test_connection_managers.py",
      "tests": [
        "tests/test_connection_managers.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_connection_managers.py::test_neo4j_manager_records_success_and_failure",
      "qualified_name": "test_neo4j_manager_records_success_and_failure",
      "name": "test_neo4j_manager_records_success_and_failure",
      "source_path": "tests/test_connection_managers.py",
      "tests": [
        "tests/test_connection_managers.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_connection_managers.py::test_qdrant_manager_handles_health_failures",
      "qualified_name": "test_qdrant_manager_handles_health_failures",
      "name": "test_qdrant_manager_handles_health_failures",
      "source_path": "tests/test_connection_managers.py",
      "tests": [
        "tests/test_connection_managers.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_coverage_report.py::StubNeo4jWriter",
      "qualified_name": "StubNeo4jWriter",
      "name": "StubNeo4jWriter",
      "source_path": "tests/test_coverage_report.py",
      "tests": [
        "tests/test_coverage_report.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_coverage_report.py::StubNeo4jWriter.ensure_constraints",
      "qualified_name": "StubNeo4jWriter.ensure_constraints",
      "name": "StubNeo4jWriter.ensure_constraints",
      "source_path": "tests/test_coverage_report.py",
      "tests": [
        "tests/test_coverage_report.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_coverage_report.py::StubNeo4jWriter.sync_artifact",
      "qualified_name": "StubNeo4jWriter.sync_artifact",
      "name": "StubNeo4jWriter.sync_artifact",
      "source_path": "tests/test_coverage_report.py",
      "tests": [
        "tests/test_coverage_report.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_coverage_report.py::StubNeo4jWriter.sync_chunks",
      "qualified_name": "StubNeo4jWriter.sync_chunks",
      "name": "StubNeo4jWriter.sync_chunks",
      "source_path": "tests/test_coverage_report.py",
      "tests": [
        "tests/test_coverage_report.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_coverage_report.py::StubQdrantWriter",
      "qualified_name": "StubQdrantWriter",
      "name": "StubQdrantWriter",
      "source_path": "tests/test_coverage_report.py",
      "tests": [
        "tests/test_coverage_report.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_coverage_report.py::StubQdrantWriter.ensure_collection",
      "qualified_name": "StubQdrantWriter.ensure_collection",
      "name": "StubQdrantWriter.ensure_collection",
      "source_path": "tests/test_coverage_report.py",
      "tests": [
        "tests/test_coverage_report.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_coverage_report.py::StubQdrantWriter.upsert_chunks",
      "qualified_name": "StubQdrantWriter.upsert_chunks",
      "name": "StubQdrantWriter.upsert_chunks",
      "source_path": "tests/test_coverage_report.py",
      "tests": [
        "tests/test_coverage_report.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_coverage_report.py::test_coverage_endpoint_after_report_generation",
      "qualified_name": "test_coverage_endpoint_after_report_generation",
      "name": "test_coverage_endpoint_after_report_generation",
      "source_path": "tests/test_coverage_report.py",
      "tests": [
        "tests/test_coverage_report.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_coverage_report.py::test_coverage_history_rotation",
      "qualified_name": "test_coverage_history_rotation",
      "name": "test_coverage_history_rotation",
      "source_path": "tests/test_coverage_report.py",
      "tests": [
        "tests/test_coverage_report.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_coverage_report.py::test_write_coverage_report",
      "qualified_name": "test_write_coverage_report",
      "name": "test_write_coverage_report",
      "source_path": "tests/test_coverage_report.py",
      "tests": [
        "tests/test_coverage_report.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_discovery_symbols.py::_write",
      "qualified_name": "_write",
      "name": "_write",
      "source_path": "tests/test_discovery_symbols.py",
      "tests": [
        "tests/test_discovery_symbols.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_discovery_symbols.py::test_discover_includes_symbols",
      "qualified_name": "test_discover_includes_symbols",
      "name": "test_discover_includes_symbols",
      "source_path": "tests/test_discovery_symbols.py",
      "tests": [
        "tests/test_discovery_symbols.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_discovery_symbols.py::test_discover_skips_symbols_when_disabled",
      "qualified_name": "test_discover_skips_symbols_when_disabled",
      "name": "test_discover_skips_symbols_when_disabled",
      "source_path": "tests/test_discovery_symbols.py",
      "tests": [
        "tests/test_discovery_symbols.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::DummyGraphService",
      "qualified_name": "DummyGraphService",
      "name": "DummyGraphService",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::DummyGraphService.__init__",
      "qualified_name": "DummyGraphService.__init__",
      "name": "DummyGraphService.__init__",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::DummyGraphService.get_node",
      "qualified_name": "DummyGraphService.get_node",
      "name": "DummyGraphService.get_node",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::DummyGraphService.get_subsystem",
      "qualified_name": "DummyGraphService.get_subsystem",
      "name": "DummyGraphService.get_subsystem",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::DummyGraphService.get_subsystem_graph",
      "qualified_name": "DummyGraphService.get_subsystem_graph",
      "name": "DummyGraphService.get_subsystem_graph",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::DummyGraphService.get_symbol_tests",
      "qualified_name": "DummyGraphService.get_symbol_tests",
      "name": "DummyGraphService.get_symbol_tests",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::DummyGraphService.list_orphan_nodes",
      "qualified_name": "DummyGraphService.list_orphan_nodes",
      "name": "DummyGraphService.list_orphan_nodes",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::DummyGraphService.run_cypher",
      "qualified_name": "DummyGraphService.run_cypher",
      "name": "DummyGraphService.run_cypher",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::DummyGraphService.search",
      "qualified_name": "DummyGraphService.search",
      "name": "DummyGraphService.search",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::app",
      "qualified_name": "app",
      "name": "app",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::test_graph_cypher_requires_maintainer_token",
      "qualified_name": "test_graph_cypher_requires_maintainer_token",
      "name": "test_graph_cypher_requires_maintainer_token",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::test_graph_node_accepts_slash_encoded_ids",
      "qualified_name": "test_graph_node_accepts_slash_encoded_ids",
      "name": "test_graph_node_accepts_slash_encoded_ids",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::test_graph_node_endpoint",
      "qualified_name": "test_graph_node_endpoint",
      "name": "test_graph_node_endpoint",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::test_graph_node_endpoint_live",
      "qualified_name": "test_graph_node_endpoint_live",
      "name": "test_graph_node_endpoint_live",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::test_graph_orphans_endpoint",
      "qualified_name": "test_graph_orphans_endpoint",
      "name": "test_graph_orphans_endpoint",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::test_graph_reader_scope",
      "qualified_name": "test_graph_reader_scope",
      "name": "test_graph_reader_scope",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::test_graph_search_endpoint",
      "qualified_name": "test_graph_search_endpoint",
      "name": "test_graph_search_endpoint",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::test_graph_search_endpoint_live",
      "qualified_name": "test_graph_search_endpoint_live",
      "name": "test_graph_search_endpoint_live",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::test_graph_subsystem_graph_endpoint",
      "qualified_name": "test_graph_subsystem_graph_endpoint",
      "name": "test_graph_subsystem_graph_endpoint",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::test_graph_subsystem_legacy_path_missing",
      "qualified_name": "test_graph_subsystem_legacy_path_missing",
      "name": "test_graph_subsystem_legacy_path_missing",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::test_graph_subsystem_not_found",
      "qualified_name": "test_graph_subsystem_not_found",
      "name": "test_graph_subsystem_not_found",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::test_graph_subsystem_returns_payload",
      "qualified_name": "test_graph_subsystem_returns_payload",
      "name": "test_graph_subsystem_returns_payload",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::test_graph_symbol_tests_endpoint",
      "qualified_name": "test_graph_symbol_tests_endpoint",
      "name": "test_graph_symbol_tests_endpoint",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_api.py::test_graph_symbol_tests_not_found",
      "qualified_name": "test_graph_symbol_tests_not_found",
      "name": "test_graph_symbol_tests_not_found",
      "source_path": "tests/test_graph_api.py",
      "tests": [
        "tests/test_graph_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_auto_migrate.py::_StubNeo4jManager",
      "qualified_name": "_StubNeo4jManager",
      "name": "_StubNeo4jManager",
      "source_path": "tests/test_graph_auto_migrate.py",
      "tests": [
        "tests/test_graph_auto_migrate.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_auto_migrate.py::_StubNeo4jManager.__init__",
      "qualified_name": "_StubNeo4jManager.__init__",
      "name": "_StubNeo4jManager.__init__",
      "source_path": "tests/test_graph_auto_migrate.py",
      "tests": [
        "tests/test_graph_auto_migrate.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_auto_migrate.py::_StubNeo4jManager.describe",
      "qualified_name": "_StubNeo4jManager.describe",
      "name": "_StubNeo4jManager.describe",
      "source_path": "tests/test_graph_auto_migrate.py",
      "tests": [
        "tests/test_graph_auto_migrate.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_auto_migrate.py::_StubNeo4jManager.get_readonly_driver",
      "qualified_name": "_StubNeo4jManager.get_readonly_driver",
      "name": "_StubNeo4jManager.get_readonly_driver",
      "source_path": "tests/test_graph_auto_migrate.py",
      "tests": [
        "tests/test_graph_auto_migrate.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_auto_migrate.py::_StubNeo4jManager.get_write_driver",
      "qualified_name": "_StubNeo4jManager.get_write_driver",
      "name": "_StubNeo4jManager.get_write_driver",
      "source_path": "tests/test_graph_auto_migrate.py",
      "tests": [
        "tests/test_graph_auto_migrate.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_auto_migrate.py::_StubNeo4jManager.heartbeat",
      "qualified_name": "_StubNeo4jManager.heartbeat",
      "name": "_StubNeo4jManager.heartbeat",
      "source_path": "tests/test_graph_auto_migrate.py",
      "tests": [
        "tests/test_graph_auto_migrate.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_auto_migrate.py::_StubNeo4jManager.mark_failure",
      "qualified_name": "_StubNeo4jManager.mark_failure",
      "name": "_StubNeo4jManager.mark_failure",
      "source_path": "tests/test_graph_auto_migrate.py",
      "tests": [
        "tests/test_graph_auto_migrate.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_auto_migrate.py::_StubQdrantManager",
      "qualified_name": "_StubQdrantManager",
      "name": "_StubQdrantManager",
      "source_path": "tests/test_graph_auto_migrate.py",
      "tests": [
        "tests/test_graph_auto_migrate.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_auto_migrate.py::_StubQdrantManager.__init__",
      "qualified_name": "_StubQdrantManager.__init__",
      "name": "_StubQdrantManager.__init__",
      "source_path": "tests/test_graph_auto_migrate.py",
      "tests": [
        "tests/test_graph_auto_migrate.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_auto_migrate.py::_StubQdrantManager.describe",
      "qualified_name": "_StubQdrantManager.describe",
      "name": "_StubQdrantManager.describe",
      "source_path": "tests/test_graph_auto_migrate.py",
      "tests": [
        "tests/test_graph_auto_migrate.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_auto_migrate.py::_StubQdrantManager.get_client",
      "qualified_name": "_StubQdrantManager.get_client",
      "name": "_StubQdrantManager.get_client",
      "source_path": "tests/test_graph_auto_migrate.py",
      "tests": [
        "tests/test_graph_auto_migrate.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_auto_migrate.py::_StubQdrantManager.heartbeat",
      "qualified_name": "_StubQdrantManager.heartbeat",
      "name": "_StubQdrantManager.heartbeat",
      "source_path": "tests/test_graph_auto_migrate.py",
      "tests": [
        "tests/test_graph_auto_migrate.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_auto_migrate.py::_StubQdrantManager.mark_failure",
      "qualified_name": "_StubQdrantManager.mark_failure",
      "name": "_StubQdrantManager.mark_failure",
      "source_path": "tests/test_graph_auto_migrate.py",
      "tests": [
        "tests/test_graph_auto_migrate.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_auto_migrate.py::_metric",
      "qualified_name": "_metric",
      "name": "_metric",
      "source_path": "tests/test_graph_auto_migrate.py",
      "tests": [
        "tests/test_graph_auto_migrate.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_auto_migrate.py::_runner_factory",
      "qualified_name": "_runner_factory",
      "name": "_runner_factory",
      "source_path": "tests/test_graph_auto_migrate.py",
      "tests": [
        "tests/test_graph_auto_migrate.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_auto_migrate.py::_stub_managers",
      "qualified_name": "_stub_managers",
      "name": "_stub_managers",
      "source_path": "tests/test_graph_auto_migrate.py",
      "tests": [
        "tests/test_graph_auto_migrate.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_auto_migrate.py::reset_migration_metrics",
      "qualified_name": "reset_migration_metrics",
      "name": "reset_migration_metrics",
      "source_path": "tests/test_graph_auto_migrate.py",
      "tests": [
        "tests/test_graph_auto_migrate.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_auto_migrate.py::reset_settings_cache",
      "qualified_name": "reset_settings_cache",
      "name": "reset_settings_cache",
      "source_path": "tests/test_graph_auto_migrate.py",
      "tests": [
        "tests/test_graph_auto_migrate.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_auto_migrate.py::test_auto_migrate_records_failure",
      "qualified_name": "test_auto_migrate_records_failure",
      "name": "test_auto_migrate_records_failure",
      "source_path": "tests/test_graph_auto_migrate.py",
      "tests": [
        "tests/test_graph_auto_migrate.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_auto_migrate.py::test_auto_migrate_runs_when_enabled",
      "qualified_name": "test_auto_migrate_runs_when_enabled",
      "name": "test_auto_migrate_runs_when_enabled",
      "source_path": "tests/test_graph_auto_migrate.py",
      "tests": [
        "tests/test_graph_auto_migrate.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_auto_migrate.py::test_auto_migrate_skipped_when_disabled",
      "qualified_name": "test_auto_migrate_skipped_when_disabled",
      "name": "test_auto_migrate_skipped_when_disabled",
      "source_path": "tests/test_graph_auto_migrate.py",
      "tests": [
        "tests/test_graph_auto_migrate.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_auto_migrate.py::test_missing_database_disables_graph_driver",
      "qualified_name": "test_missing_database_disables_graph_driver",
      "name": "test_missing_database_disables_graph_driver",
      "source_path": "tests/test_graph_auto_migrate.py",
      "tests": [
        "tests/test_graph_auto_migrate.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_cli.py::DummySettings",
      "qualified_name": "DummySettings",
      "name": "DummySettings",
      "source_path": "tests/test_graph_cli.py",
      "tests": [
        "tests/test_graph_cli.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_cli.py::test_graph_cli_dry_run_prints_pending",
      "qualified_name": "test_graph_cli_dry_run_prints_pending",
      "name": "test_graph_cli_dry_run_prints_pending",
      "source_path": "tests/test_graph_cli.py",
      "tests": [
        "tests/test_graph_cli.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_cli.py::test_graph_cli_migrate_runs_runner",
      "qualified_name": "test_graph_cli_migrate_runs_runner",
      "name": "test_graph_cli_migrate_runs_runner",
      "source_path": "tests/test_graph_cli.py",
      "tests": [
        "tests/test_graph_cli.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_database_validation.py::test_verify_graph_database_returns_false_when_database_missing",
      "qualified_name": "test_verify_graph_database_returns_false_when_database_missing",
      "name": "test_verify_graph_database_returns_false_when_database_missing",
      "source_path": "tests/test_graph_database_validation.py",
      "tests": [
        "tests/test_graph_database_validation.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_database_validation.py::test_verify_graph_database_returns_true_on_success",
      "qualified_name": "test_verify_graph_database_returns_true_on_success",
      "name": "test_verify_graph_database_returns_true_on_success",
      "source_path": "tests/test_graph_database_validation.py",
      "tests": [
        "tests/test_graph_database_validation.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_migrations.py::FakeDriver",
      "qualified_name": "FakeDriver",
      "name": "FakeDriver",
      "source_path": "tests/test_graph_migrations.py",
      "tests": [
        "tests/test_graph_migrations.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_migrations.py::FakeDriver.__init__",
      "qualified_name": "FakeDriver.__init__",
      "name": "FakeDriver.__init__",
      "source_path": "tests/test_graph_migrations.py",
      "tests": [
        "tests/test_graph_migrations.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_migrations.py::FakeDriver.close",
      "qualified_name": "FakeDriver.close",
      "name": "FakeDriver.close",
      "source_path": "tests/test_graph_migrations.py",
      "tests": [
        "tests/test_graph_migrations.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_migrations.py::FakeDriver.session",
      "qualified_name": "FakeDriver.session",
      "name": "FakeDriver.session",
      "source_path": "tests/test_graph_migrations.py",
      "tests": [
        "tests/test_graph_migrations.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_migrations.py::FakeResult",
      "qualified_name": "FakeResult",
      "name": "FakeResult",
      "source_path": "tests/test_graph_migrations.py",
      "tests": [
        "tests/test_graph_migrations.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_migrations.py::FakeResult.__init__",
      "qualified_name": "FakeResult.__init__",
      "name": "FakeResult.__init__",
      "source_path": "tests/test_graph_migrations.py",
      "tests": [
        "tests/test_graph_migrations.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_migrations.py::FakeResult.single",
      "qualified_name": "FakeResult.single",
      "name": "FakeResult.single",
      "source_path": "tests/test_graph_migrations.py",
      "tests": [
        "tests/test_graph_migrations.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_migrations.py::FakeSession",
      "qualified_name": "FakeSession",
      "name": "FakeSession",
      "source_path": "tests/test_graph_migrations.py",
      "tests": [
        "tests/test_graph_migrations.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_migrations.py::FakeSession.__enter__",
      "qualified_name": "FakeSession.__enter__",
      "name": "FakeSession.__enter__",
      "source_path": "tests/test_graph_migrations.py",
      "tests": [
        "tests/test_graph_migrations.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_migrations.py::FakeSession.__exit__",
      "qualified_name": "FakeSession.__exit__",
      "name": "FakeSession.__exit__",
      "source_path": "tests/test_graph_migrations.py",
      "tests": [
        "tests/test_graph_migrations.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_migrations.py::FakeSession.__init__",
      "qualified_name": "FakeSession.__init__",
      "name": "FakeSession.__init__",
      "source_path": "tests/test_graph_migrations.py",
      "tests": [
        "tests/test_graph_migrations.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_migrations.py::FakeSession.begin_transaction",
      "qualified_name": "FakeSession.begin_transaction",
      "name": "FakeSession.begin_transaction",
      "source_path": "tests/test_graph_migrations.py",
      "tests": [
        "tests/test_graph_migrations.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_migrations.py::FakeSession.close",
      "qualified_name": "FakeSession.close",
      "name": "FakeSession.close",
      "source_path": "tests/test_graph_migrations.py",
      "tests": [
        "tests/test_graph_migrations.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_migrations.py::FakeSession.run",
      "qualified_name": "FakeSession.run",
      "name": "FakeSession.run",
      "source_path": "tests/test_graph_migrations.py",
      "tests": [
        "tests/test_graph_migrations.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_migrations.py::FakeTransaction",
      "qualified_name": "FakeTransaction",
      "name": "FakeTransaction",
      "source_path": "tests/test_graph_migrations.py",
      "tests": [
        "tests/test_graph_migrations.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_migrations.py::FakeTransaction.__enter__",
      "qualified_name": "FakeTransaction.__enter__",
      "name": "FakeTransaction.__enter__",
      "source_path": "tests/test_graph_migrations.py",
      "tests": [
        "tests/test_graph_migrations.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_migrations.py::FakeTransaction.__exit__",
      "qualified_name": "FakeTransaction.__exit__",
      "name": "FakeTransaction.__exit__",
      "source_path": "tests/test_graph_migrations.py",
      "tests": [
        "tests/test_graph_migrations.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_migrations.py::FakeTransaction.__init__",
      "qualified_name": "FakeTransaction.__init__",
      "name": "FakeTransaction.__init__",
      "source_path": "tests/test_graph_migrations.py",
      "tests": [
        "tests/test_graph_migrations.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_migrations.py::FakeTransaction.commit",
      "qualified_name": "FakeTransaction.commit",
      "name": "FakeTransaction.commit",
      "source_path": "tests/test_graph_migrations.py",
      "tests": [
        "tests/test_graph_migrations.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_migrations.py::FakeTransaction.rollback",
      "qualified_name": "FakeTransaction.rollback",
      "name": "FakeTransaction.rollback",
      "source_path": "tests/test_graph_migrations.py",
      "tests": [
        "tests/test_graph_migrations.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_migrations.py::FakeTransaction.run",
      "qualified_name": "FakeTransaction.run",
      "name": "FakeTransaction.run",
      "source_path": "tests/test_graph_migrations.py",
      "tests": [
        "tests/test_graph_migrations.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_migrations.py::test_migration_runner_applies_pending_migrations",
      "qualified_name": "test_migration_runner_applies_pending_migrations",
      "name": "test_migration_runner_applies_pending_migrations",
      "source_path": "tests/test_graph_migrations.py",
      "tests": [
        "tests/test_graph_migrations.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_startup.py::DummyGraphService",
      "qualified_name": "DummyGraphService",
      "name": "DummyGraphService",
      "source_path": "tests/test_graph_service_startup.py",
      "tests": [
        "tests/test_graph_service_startup.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_startup.py::DummyGraphService.__init__",
      "qualified_name": "DummyGraphService.__init__",
      "name": "DummyGraphService.__init__",
      "source_path": "tests/test_graph_service_startup.py",
      "tests": [
        "tests/test_graph_service_startup.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_startup.py::DummyGraphService.get_subsystem",
      "qualified_name": "DummyGraphService.get_subsystem",
      "name": "DummyGraphService.get_subsystem",
      "source_path": "tests/test_graph_service_startup.py",
      "tests": [
        "tests/test_graph_service_startup.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_startup.py::_make_request",
      "qualified_name": "_make_request",
      "name": "_make_request",
      "source_path": "tests/test_graph_service_startup.py",
      "tests": [
        "tests/test_graph_service_startup.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_startup.py::_receive",
      "qualified_name": "_receive",
      "name": "_receive",
      "source_path": "tests/test_graph_service_startup.py",
      "tests": [
        "tests/test_graph_service_startup.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_startup.py::reset_settings_cache",
      "qualified_name": "reset_settings_cache",
      "name": "reset_settings_cache",
      "source_path": "tests/test_graph_service_startup.py",
      "tests": [
        "tests/test_graph_service_startup.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_startup.py::set_state_path",
      "qualified_name": "set_state_path",
      "name": "set_state_path",
      "source_path": "tests/test_graph_service_startup.py",
      "tests": [
        "tests/test_graph_service_startup.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_startup.py::test_graph_dependency_returns_503_when_database_missing",
      "qualified_name": "test_graph_dependency_returns_503_when_database_missing",
      "name": "test_graph_dependency_returns_503_when_database_missing",
      "source_path": "tests/test_graph_service_startup.py",
      "tests": [
        "tests/test_graph_service_startup.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_startup.py::test_graph_dependency_returns_service_when_available",
      "qualified_name": "test_graph_dependency_returns_service_when_available",
      "name": "test_graph_dependency_returns_service_when_available",
      "source_path": "tests/test_graph_service_startup.py",
      "tests": [
        "tests/test_graph_service_startup.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::DummyDriver",
      "qualified_name": "DummyDriver",
      "name": "DummyDriver",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::DummyDriver.__init__",
      "qualified_name": "DummyDriver.__init__",
      "name": "DummyDriver.__init__",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::DummyDriver.execute_query",
      "qualified_name": "DummyDriver.execute_query",
      "name": "DummyDriver.execute_query",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::DummyDriver.session",
      "qualified_name": "DummyDriver.session",
      "name": "DummyDriver.session",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::DummyNode",
      "qualified_name": "DummyNode",
      "name": "DummyNode",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::DummyNode.__init__",
      "qualified_name": "DummyNode.__init__",
      "name": "DummyNode.__init__",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::DummyRecord",
      "qualified_name": "DummyRecord",
      "name": "DummyRecord",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::DummyRecord.__init__",
      "qualified_name": "DummyRecord.__init__",
      "name": "DummyRecord.__init__",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::DummyRecord.values",
      "qualified_name": "DummyRecord.values",
      "name": "DummyRecord.values",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::DummyRelationship",
      "qualified_name": "DummyRelationship",
      "name": "DummyRelationship",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::DummyRelationship.__init__",
      "qualified_name": "DummyRelationship.__init__",
      "name": "DummyRelationship.__init__",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::DummySession",
      "qualified_name": "DummySession",
      "name": "DummySession",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::DummySession.__enter__",
      "qualified_name": "DummySession.__enter__",
      "name": "DummySession.__enter__",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::DummySession.__exit__",
      "qualified_name": "DummySession.__exit__",
      "name": "DummySession.__exit__",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::DummySession.__init__",
      "qualified_name": "DummySession.__init__",
      "name": "DummySession.__init__",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::DummySession.execute_read",
      "qualified_name": "DummySession.execute_read",
      "name": "DummySession.execute_read",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::DummySession.run",
      "qualified_name": "DummySession.run",
      "name": "DummySession.run",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::_metric_value",
      "qualified_name": "_metric_value",
      "name": "_metric_value",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::_reset_metric",
      "qualified_name": "_reset_metric",
      "name": "_reset_metric",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::dummy_driver",
      "qualified_name": "dummy_driver",
      "name": "dummy_driver",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::fake_fetch_artifacts",
      "qualified_name": "fake_fetch_artifacts",
      "name": "fake_fetch_artifacts",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::fake_fetch_node_by_id",
      "qualified_name": "fake_fetch_node_by_id",
      "name": "fake_fetch_node_by_id",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::fake_fetch_node_relationships",
      "qualified_name": "fake_fetch_node_relationships",
      "name": "fake_fetch_node_relationships",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::fake_fetch_orphans",
      "qualified_name": "fake_fetch_orphans",
      "name": "fake_fetch_orphans",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::fake_fetch_paths",
      "qualified_name": "fake_fetch_paths",
      "name": "fake_fetch_paths",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::fake_fetch_subsystem_node",
      "qualified_name": "fake_fetch_subsystem_node",
      "name": "fake_fetch_subsystem_node",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::fake_fetch_symbol_tests",
      "qualified_name": "fake_fetch_symbol_tests",
      "name": "fake_fetch_symbol_tests",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::fake_search_entities",
      "qualified_name": "fake_search_entities",
      "name": "fake_search_entities",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::patch_graph_types",
      "qualified_name": "patch_graph_types",
      "name": "patch_graph_types",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::test_fetch_subsystem_paths_inlines_depth_literal",
      "qualified_name": "test_fetch_subsystem_paths_inlines_depth_literal",
      "name": "test_fetch_subsystem_paths_inlines_depth_literal",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::test_get_node_missing_raises",
      "qualified_name": "test_get_node_missing_raises",
      "name": "test_get_node_missing_raises",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::test_get_node_with_relationships",
      "qualified_name": "test_get_node_with_relationships",
      "name": "test_get_node_with_relationships",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::test_get_subsystem_graph_returns_nodes_and_edges",
      "qualified_name": "test_get_subsystem_graph_returns_nodes_and_edges",
      "name": "test_get_subsystem_graph_returns_nodes_and_edges",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::test_get_subsystem_missing_raises",
      "qualified_name": "test_get_subsystem_missing_raises",
      "name": "test_get_subsystem_missing_raises",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::test_get_subsystem_paginates_and_includes_artifacts",
      "qualified_name": "test_get_subsystem_paginates_and_includes_artifacts",
      "name": "test_get_subsystem_paginates_and_includes_artifacts",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::test_get_symbol_tests_missing_symbol_raises",
      "qualified_name": "test_get_symbol_tests_missing_symbol_raises",
      "name": "test_get_symbol_tests_missing_symbol_raises",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::test_get_symbol_tests_returns_serialized_payload",
      "qualified_name": "test_get_symbol_tests_returns_serialized_payload",
      "name": "test_get_symbol_tests_returns_serialized_payload",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::test_list_orphan_nodes_rejects_unknown_label",
      "qualified_name": "test_list_orphan_nodes_rejects_unknown_label",
      "name": "test_list_orphan_nodes_rejects_unknown_label",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::test_list_orphan_nodes_serializes_results",
      "qualified_name": "test_list_orphan_nodes_serializes_results",
      "name": "test_list_orphan_nodes_serializes_results",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::test_run_cypher_allows_whitelisted_procedure",
      "qualified_name": "test_run_cypher_allows_whitelisted_procedure",
      "name": "test_run_cypher_allows_whitelisted_procedure",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::test_run_cypher_rejects_disallowed_procedure",
      "qualified_name": "test_run_cypher_rejects_disallowed_procedure",
      "name": "test_run_cypher_rejects_disallowed_procedure",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::test_run_cypher_rejects_non_read_queries",
      "qualified_name": "test_run_cypher_rejects_non_read_queries",
      "name": "test_run_cypher_rejects_non_read_queries",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::test_run_cypher_rejects_updates_detected_in_counters",
      "qualified_name": "test_run_cypher_rejects_updates_detected_in_counters",
      "name": "test_run_cypher_rejects_updates_detected_in_counters",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::test_run_cypher_serializes_records",
      "qualified_name": "test_run_cypher_serializes_records",
      "name": "test_run_cypher_serializes_records",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::test_search_serializes_results",
      "qualified_name": "test_search_serializes_results",
      "name": "test_search_serializes_results",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::test_shortest_path_depth",
      "qualified_name": "test_shortest_path_depth",
      "name": "test_shortest_path_depth",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_service_unit.py::test_shortest_path_depth_none",
      "qualified_name": "test_shortest_path_depth_none",
      "name": "test_shortest_path_depth_none",
      "source_path": "tests/test_graph_service_unit.py",
      "tests": [
        "tests/test_graph_service_unit.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_validation.py::_DummyEmbedder",
      "qualified_name": "_DummyEmbedder",
      "name": "_DummyEmbedder",
      "source_path": "tests/test_graph_validation.py",
      "tests": [
        "tests/test_graph_validation.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_validation.py::_DummyEmbedder.__init__",
      "qualified_name": "_DummyEmbedder.__init__",
      "name": "_DummyEmbedder.__init__",
      "source_path": "tests/test_graph_validation.py",
      "tests": [
        "tests/test_graph_validation.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_validation.py::_DummyEmbedder.dimension",
      "qualified_name": "_DummyEmbedder.dimension",
      "name": "_DummyEmbedder.dimension",
      "source_path": "tests/test_graph_validation.py",
      "tests": [
        "tests/test_graph_validation.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_validation.py::_DummyEmbedder.encode",
      "qualified_name": "_DummyEmbedder.encode",
      "name": "_DummyEmbedder.encode",
      "source_path": "tests/test_graph_validation.py",
      "tests": [
        "tests/test_graph_validation.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_validation.py::_DummyQdrantClient",
      "qualified_name": "_DummyQdrantClient",
      "name": "_DummyQdrantClient",
      "source_path": "tests/test_graph_validation.py",
      "tests": [
        "tests/test_graph_validation.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_validation.py::_DummyQdrantClient.__init__",
      "qualified_name": "_DummyQdrantClient.__init__",
      "name": "_DummyQdrantClient.__init__",
      "source_path": "tests/test_graph_validation.py",
      "tests": [
        "tests/test_graph_validation.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_validation.py::_DummyQdrantClient.search",
      "qualified_name": "_DummyQdrantClient.search",
      "name": "_DummyQdrantClient.search",
      "source_path": "tests/test_graph_validation.py",
      "tests": [
        "tests/test_graph_validation.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_validation.py::_FakePoint",
      "qualified_name": "_FakePoint",
      "name": "_FakePoint",
      "source_path": "tests/test_graph_validation.py",
      "tests": [
        "tests/test_graph_validation.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_validation.py::_FakePoint.__init__",
      "qualified_name": "_FakePoint.__init__",
      "name": "_FakePoint.__init__",
      "source_path": "tests/test_graph_validation.py",
      "tests": [
        "tests/test_graph_validation.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_validation.py::test_ingestion_populates_graph",
      "qualified_name": "test_ingestion_populates_graph",
      "name": "test_ingestion_populates_graph",
      "source_path": "tests/test_graph_validation.py",
      "tests": [
        "tests/test_graph_validation.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_graph_validation.py::test_search_replay_against_real_graph",
      "qualified_name": "test_search_replay_against_real_graph",
      "name": "test_search_replay_against_real_graph",
      "source_path": "tests/test_graph_validation.py",
      "tests": [
        "tests/test_graph_validation.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_cli.py::reset_settings_cache",
      "qualified_name": "reset_settings_cache",
      "name": "reset_settings_cache",
      "source_path": "tests/test_ingest_cli.py",
      "tests": [
        "tests/test_ingest_cli.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_cli.py::sample_repo",
      "qualified_name": "sample_repo",
      "name": "sample_repo",
      "source_path": "tests/test_ingest_cli.py",
      "tests": [
        "tests/test_ingest_cli.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_cli.py::test_audit_logger_recent_normalizes_limit",
      "qualified_name": "test_audit_logger_recent_normalizes_limit",
      "name": "test_audit_logger_recent_normalizes_limit",
      "source_path": "tests/test_ingest_cli.py",
      "tests": [
        "tests/test_ingest_cli.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_cli.py::test_cli_audit_history_json",
      "qualified_name": "test_cli_audit_history_json",
      "name": "test_cli_audit_history_json",
      "source_path": "tests/test_ingest_cli.py",
      "tests": [
        "tests/test_ingest_cli.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_cli.py::test_cli_audit_history_limit_clamped",
      "qualified_name": "test_cli_audit_history_limit_clamped",
      "name": "test_cli_audit_history_limit_clamped",
      "source_path": "tests/test_ingest_cli.py",
      "tests": [
        "tests/test_ingest_cli.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_cli.py::test_cli_audit_history_no_entries",
      "qualified_name": "test_cli_audit_history_no_entries",
      "name": "test_cli_audit_history_no_entries",
      "source_path": "tests/test_ingest_cli.py",
      "tests": [
        "tests/test_ingest_cli.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_cli.py::test_cli_rebuild_dry_run",
      "qualified_name": "test_cli_rebuild_dry_run",
      "name": "test_cli_rebuild_dry_run",
      "source_path": "tests/test_ingest_cli.py",
      "tests": [
        "tests/test_ingest_cli.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_cli.py::test_cli_rebuild_full_rebuild_flag",
      "qualified_name": "test_cli_rebuild_full_rebuild_flag",
      "name": "test_cli_rebuild_full_rebuild_flag",
      "source_path": "tests/test_ingest_cli.py",
      "tests": [
        "tests/test_ingest_cli.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_cli.py::test_cli_rebuild_incremental_flag",
      "qualified_name": "test_cli_rebuild_incremental_flag",
      "name": "test_cli_rebuild_incremental_flag",
      "source_path": "tests/test_ingest_cli.py",
      "tests": [
        "tests/test_ingest_cli.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_cli.py::test_cli_rebuild_requires_maintainer_token",
      "qualified_name": "test_cli_rebuild_requires_maintainer_token",
      "name": "test_cli_rebuild_requires_maintainer_token",
      "source_path": "tests/test_ingest_cli.py",
      "tests": [
        "tests/test_ingest_cli.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_cli.py::test_cli_rebuild_with_maintainer_token",
      "qualified_name": "test_cli_rebuild_with_maintainer_token",
      "name": "test_cli_rebuild_with_maintainer_token",
      "source_path": "tests/test_ingest_cli.py",
      "tests": [
        "tests/test_ingest_cli.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_pipeline.py::StubNeo4jWriter",
      "qualified_name": "StubNeo4jWriter",
      "name": "StubNeo4jWriter",
      "source_path": "tests/test_ingest_pipeline.py",
      "tests": [
        "tests/test_ingest_pipeline.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_pipeline.py::StubNeo4jWriter.__init__",
      "qualified_name": "StubNeo4jWriter.__init__",
      "name": "StubNeo4jWriter.__init__",
      "source_path": "tests/test_ingest_pipeline.py",
      "tests": [
        "tests/test_ingest_pipeline.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_pipeline.py::StubNeo4jWriter.delete_artifact",
      "qualified_name": "StubNeo4jWriter.delete_artifact",
      "name": "StubNeo4jWriter.delete_artifact",
      "source_path": "tests/test_ingest_pipeline.py",
      "tests": [
        "tests/test_ingest_pipeline.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_pipeline.py::StubNeo4jWriter.ensure_constraints",
      "qualified_name": "StubNeo4jWriter.ensure_constraints",
      "name": "StubNeo4jWriter.ensure_constraints",
      "source_path": "tests/test_ingest_pipeline.py",
      "tests": [
        "tests/test_ingest_pipeline.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_pipeline.py::StubNeo4jWriter.sync_artifact",
      "qualified_name": "StubNeo4jWriter.sync_artifact",
      "name": "StubNeo4jWriter.sync_artifact",
      "source_path": "tests/test_ingest_pipeline.py",
      "tests": [
        "tests/test_ingest_pipeline.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_pipeline.py::StubNeo4jWriter.sync_chunks",
      "qualified_name": "StubNeo4jWriter.sync_chunks",
      "name": "StubNeo4jWriter.sync_chunks",
      "source_path": "tests/test_ingest_pipeline.py",
      "tests": [
        "tests/test_ingest_pipeline.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_pipeline.py::StubQdrantWriter",
      "qualified_name": "StubQdrantWriter",
      "name": "StubQdrantWriter",
      "source_path": "tests/test_ingest_pipeline.py",
      "tests": [
        "tests/test_ingest_pipeline.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_pipeline.py::StubQdrantWriter.__init__",
      "qualified_name": "StubQdrantWriter.__init__",
      "name": "StubQdrantWriter.__init__",
      "source_path": "tests/test_ingest_pipeline.py",
      "tests": [
        "tests/test_ingest_pipeline.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_pipeline.py::StubQdrantWriter.delete_artifact",
      "qualified_name": "StubQdrantWriter.delete_artifact",
      "name": "StubQdrantWriter.delete_artifact",
      "source_path": "tests/test_ingest_pipeline.py",
      "tests": [
        "tests/test_ingest_pipeline.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_pipeline.py::StubQdrantWriter.ensure_collection",
      "qualified_name": "StubQdrantWriter.ensure_collection",
      "name": "StubQdrantWriter.ensure_collection",
      "source_path": "tests/test_ingest_pipeline.py",
      "tests": [
        "tests/test_ingest_pipeline.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_pipeline.py::StubQdrantWriter.upsert_chunks",
      "qualified_name": "StubQdrantWriter.upsert_chunks",
      "name": "StubQdrantWriter.upsert_chunks",
      "source_path": "tests/test_ingest_pipeline.py",
      "tests": [
        "tests/test_ingest_pipeline.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_pipeline.py::_metric_value",
      "qualified_name": "_metric_value",
      "name": "_metric_value",
      "source_path": "tests/test_ingest_pipeline.py",
      "tests": [
        "tests/test_ingest_pipeline.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_pipeline.py::_run",
      "qualified_name": "_run",
      "name": "_run",
      "source_path": "tests/test_ingest_pipeline.py",
      "tests": [
        "tests/test_ingest_pipeline.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_pipeline.py::_run_pipeline",
      "qualified_name": "_run_pipeline",
      "name": "_run_pipeline",
      "source_path": "tests/test_ingest_pipeline.py",
      "tests": [
        "tests/test_ingest_pipeline.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_pipeline.py::sample_repo",
      "qualified_name": "sample_repo",
      "name": "sample_repo",
      "source_path": "tests/test_ingest_pipeline.py",
      "tests": [
        "tests/test_ingest_pipeline.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_pipeline.py::test_artifact_ledger_loads_gracefully_on_corruption",
      "qualified_name": "test_artifact_ledger_loads_gracefully_on_corruption",
      "name": "test_artifact_ledger_loads_gracefully_on_corruption",
      "source_path": "tests/test_ingest_pipeline.py",
      "tests": [
        "tests/test_ingest_pipeline.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_pipeline.py::test_artifact_ledger_writes_atomically",
      "qualified_name": "test_artifact_ledger_writes_atomically",
      "name": "test_artifact_ledger_writes_atomically",
      "source_path": "tests/test_ingest_pipeline.py",
      "tests": [
        "tests/test_ingest_pipeline.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_pipeline.py::test_pipeline_generates_chunks",
      "qualified_name": "test_pipeline_generates_chunks",
      "name": "test_pipeline_generates_chunks",
      "source_path": "tests/test_ingest_pipeline.py",
      "tests": [
        "tests/test_ingest_pipeline.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_pipeline.py::test_pipeline_removes_stale_artifacts",
      "qualified_name": "test_pipeline_removes_stale_artifacts",
      "name": "test_pipeline_removes_stale_artifacts",
      "source_path": "tests/test_ingest_pipeline.py",
      "tests": [
        "tests/test_ingest_pipeline.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ingest_pipeline.py::test_pipeline_skips_unchanged_artifacts",
      "qualified_name": "test_pipeline_skips_unchanged_artifacts",
      "name": "test_pipeline_skips_unchanged_artifacts",
      "source_path": "tests/test_ingest_pipeline.py",
      "tests": [
        "tests/test_ingest_pipeline.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_km_watch.py::_metric_value",
      "qualified_name": "_metric_value",
      "name": "_metric_value",
      "source_path": "tests/test_km_watch.py",
      "tests": [
        "tests/test_km_watch.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_km_watch.py::test_compute_fingerprints",
      "qualified_name": "test_compute_fingerprints",
      "name": "test_compute_fingerprints",
      "source_path": "tests/test_km_watch.py",
      "tests": [
        "tests/test_km_watch.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_km_watch.py::test_diff_fingerprints_detects_changes",
      "qualified_name": "test_diff_fingerprints_detects_changes",
      "name": "test_diff_fingerprints_detects_changes",
      "source_path": "tests/test_km_watch.py",
      "tests": [
        "tests/test_km_watch.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_km_watch.py::test_watch_metrics_increment",
      "qualified_name": "test_watch_metrics_increment",
      "name": "test_watch_metrics_increment",
      "source_path": "tests/test_km_watch.py",
      "tests": [
        "tests/test_km_watch.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_lifecycle_cli.py::test_lifecycle_cli_json",
      "qualified_name": "test_lifecycle_cli_json",
      "name": "test_lifecycle_cli_json",
      "source_path": "tests/test_lifecycle_cli.py",
      "tests": [
        "tests/test_lifecycle_cli.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_lifecycle_cli.py::test_lifecycle_cli_missing_file",
      "qualified_name": "test_lifecycle_cli_missing_file",
      "name": "test_lifecycle_cli_missing_file",
      "source_path": "tests/test_lifecycle_cli.py",
      "tests": [
        "tests/test_lifecycle_cli.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_lifecycle_report.py::DummyGraphService",
      "qualified_name": "DummyGraphService",
      "name": "DummyGraphService",
      "source_path": "tests/test_lifecycle_report.py",
      "tests": [
        "tests/test_lifecycle_report.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_lifecycle_report.py::DummyGraphService.__init__",
      "qualified_name": "DummyGraphService.__init__",
      "name": "DummyGraphService.__init__",
      "source_path": "tests/test_lifecycle_report.py",
      "tests": [
        "tests/test_lifecycle_report.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_lifecycle_report.py::DummyGraphService.list_orphan_nodes",
      "qualified_name": "DummyGraphService.list_orphan_nodes",
      "name": "DummyGraphService.list_orphan_nodes",
      "source_path": "tests/test_lifecycle_report.py",
      "tests": [
        "tests/test_lifecycle_report.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_lifecycle_report.py::_ingestion_result",
      "qualified_name": "_ingestion_result",
      "name": "_ingestion_result",
      "source_path": "tests/test_lifecycle_report.py",
      "tests": [
        "tests/test_lifecycle_report.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_lifecycle_report.py::test_write_lifecycle_report_with_graph",
      "qualified_name": "test_write_lifecycle_report_with_graph",
      "name": "test_write_lifecycle_report_with_graph",
      "source_path": "tests/test_lifecycle_report.py",
      "tests": [
        "tests/test_lifecycle_report.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_lifecycle_report.py::test_write_lifecycle_report_without_graph",
      "qualified_name": "test_write_lifecycle_report_without_graph",
      "name": "test_write_lifecycle_report_without_graph",
      "source_path": "tests/test_lifecycle_report.py",
      "tests": [
        "tests/test_lifecycle_report.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_mcp_recipes.py::test_snippets_are_valid_json",
      "qualified_name": "test_snippets_are_valid_json",
      "name": "test_snippets_are_valid_json",
      "source_path": "tests/test_mcp_recipes.py",
      "tests": [
        "tests/test_mcp_recipes.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_mcp_smoke_recipes.py::_recipe_params",
      "qualified_name": "_recipe_params",
      "name": "_recipe_params",
      "source_path": "tests/test_mcp_smoke_recipes.py",
      "tests": [
        "tests/test_mcp_smoke_recipes.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_mcp_smoke_recipes.py::test_recipe_lines_are_valid_json",
      "qualified_name": "test_recipe_lines_are_valid_json",
      "name": "test_recipe_lines_are_valid_json",
      "source_path": "tests/test_mcp_smoke_recipes.py",
      "tests": [
        "tests/test_mcp_smoke_recipes.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_neo4j_writer.py::RecordingDriver",
      "qualified_name": "RecordingDriver",
      "name": "RecordingDriver",
      "source_path": "tests/test_neo4j_writer.py",
      "tests": [
        "tests/test_neo4j_writer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_neo4j_writer.py::RecordingDriver.__init__",
      "qualified_name": "RecordingDriver.__init__",
      "name": "RecordingDriver.__init__",
      "source_path": "tests/test_neo4j_writer.py",
      "tests": [
        "tests/test_neo4j_writer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_neo4j_writer.py::RecordingDriver.session",
      "qualified_name": "RecordingDriver.session",
      "name": "RecordingDriver.session",
      "source_path": "tests/test_neo4j_writer.py",
      "tests": [
        "tests/test_neo4j_writer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_neo4j_writer.py::RecordingSession",
      "qualified_name": "RecordingSession",
      "name": "RecordingSession",
      "source_path": "tests/test_neo4j_writer.py",
      "tests": [
        "tests/test_neo4j_writer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_neo4j_writer.py::RecordingSession.__enter__",
      "qualified_name": "RecordingSession.__enter__",
      "name": "RecordingSession.__enter__",
      "source_path": "tests/test_neo4j_writer.py",
      "tests": [
        "tests/test_neo4j_writer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_neo4j_writer.py::RecordingSession.__exit__",
      "qualified_name": "RecordingSession.__exit__",
      "name": "RecordingSession.__exit__",
      "source_path": "tests/test_neo4j_writer.py",
      "tests": [
        "tests/test_neo4j_writer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_neo4j_writer.py::RecordingSession.__init__",
      "qualified_name": "RecordingSession.__init__",
      "name": "RecordingSession.__init__",
      "source_path": "tests/test_neo4j_writer.py",
      "tests": [
        "tests/test_neo4j_writer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_neo4j_writer.py::RecordingSession.run",
      "qualified_name": "RecordingSession.run",
      "name": "RecordingSession.run",
      "source_path": "tests/test_neo4j_writer.py",
      "tests": [
        "tests/test_neo4j_writer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_neo4j_writer.py::_make_writer",
      "qualified_name": "_make_writer",
      "name": "_make_writer",
      "source_path": "tests/test_neo4j_writer.py",
      "tests": [
        "tests/test_neo4j_writer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_neo4j_writer.py::test_delete_artifact_removes_declared_symbols",
      "qualified_name": "test_delete_artifact_removes_declared_symbols",
      "name": "test_delete_artifact_removes_declared_symbols",
      "source_path": "tests/test_neo4j_writer.py",
      "tests": [
        "tests/test_neo4j_writer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_neo4j_writer.py::test_sync_artifact_creates_domain_relationships",
      "qualified_name": "test_sync_artifact_creates_domain_relationships",
      "name": "test_sync_artifact_creates_domain_relationships",
      "source_path": "tests/test_neo4j_writer.py",
      "tests": [
        "tests/test_neo4j_writer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_neo4j_writer.py::test_sync_artifact_creates_exercises_relationships",
      "qualified_name": "test_sync_artifact_creates_exercises_relationships",
      "name": "test_sync_artifact_creates_exercises_relationships",
      "source_path": "tests/test_neo4j_writer.py",
      "tests": [
        "tests/test_neo4j_writer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_neo4j_writer.py::test_sync_artifact_ignores_missing_symbols",
      "qualified_name": "test_sync_artifact_ignores_missing_symbols",
      "name": "test_sync_artifact_ignores_missing_symbols",
      "source_path": "tests/test_neo4j_writer.py",
      "tests": [
        "tests/test_neo4j_writer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_neo4j_writer.py::test_sync_artifact_merges_subsystem_edge_once",
      "qualified_name": "test_sync_artifact_merges_subsystem_edge_once",
      "name": "test_sync_artifact_merges_subsystem_edge_once",
      "source_path": "tests/test_neo4j_writer.py",
      "tests": [
        "tests/test_neo4j_writer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_neo4j_writer.py::test_sync_chunks_links_chunk_to_artifact",
      "qualified_name": "test_sync_chunks_links_chunk_to_artifact",
      "name": "test_sync_chunks_links_chunk_to_artifact",
      "source_path": "tests/test_neo4j_writer.py",
      "tests": [
        "tests/test_neo4j_writer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_qdrant_writer.py::build_client",
      "qualified_name": "build_client",
      "name": "build_client",
      "source_path": "tests/test_qdrant_writer.py",
      "tests": [
        "tests/test_qdrant_writer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_qdrant_writer.py::stub_qdrant_models",
      "qualified_name": "stub_qdrant_models",
      "name": "stub_qdrant_models",
      "source_path": "tests/test_qdrant_writer.py",
      "tests": [
        "tests/test_qdrant_writer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_qdrant_writer.py::test_ensure_collection_creates_when_missing",
      "qualified_name": "test_ensure_collection_creates_when_missing",
      "name": "test_ensure_collection_creates_when_missing",
      "source_path": "tests/test_qdrant_writer.py",
      "tests": [
        "tests/test_qdrant_writer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_qdrant_writer.py::test_ensure_collection_handles_conflict",
      "qualified_name": "test_ensure_collection_handles_conflict",
      "name": "test_ensure_collection_handles_conflict",
      "source_path": "tests/test_qdrant_writer.py",
      "tests": [
        "tests/test_qdrant_writer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_qdrant_writer.py::test_ensure_collection_noop_when_collection_exists",
      "qualified_name": "test_ensure_collection_noop_when_collection_exists",
      "name": "test_ensure_collection_noop_when_collection_exists",
      "source_path": "tests/test_qdrant_writer.py",
      "tests": [
        "tests/test_qdrant_writer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_qdrant_writer.py::test_ensure_collection_retries_on_transient_failure",
      "qualified_name": "test_ensure_collection_retries_on_transient_failure",
      "name": "test_ensure_collection_retries_on_transient_failure",
      "source_path": "tests/test_qdrant_writer.py",
      "tests": [
        "tests/test_qdrant_writer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_qdrant_writer.py::test_reset_collection_invokes_recreate",
      "qualified_name": "test_reset_collection_invokes_recreate",
      "name": "test_reset_collection_invokes_recreate",
      "source_path": "tests/test_qdrant_writer.py",
      "tests": [
        "tests/test_qdrant_writer.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_recipes_executor.py::FakeToolExecutor",
      "qualified_name": "FakeToolExecutor",
      "name": "FakeToolExecutor",
      "source_path": "tests/test_recipes_executor.py",
      "tests": [
        "tests/test_recipes_executor.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_recipes_executor.py::FakeToolExecutor.__aenter__",
      "qualified_name": "FakeToolExecutor.__aenter__",
      "name": "FakeToolExecutor.__aenter__",
      "source_path": "tests/test_recipes_executor.py",
      "tests": [
        "tests/test_recipes_executor.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_recipes_executor.py::FakeToolExecutor.__aexit__",
      "qualified_name": "FakeToolExecutor.__aexit__",
      "name": "FakeToolExecutor.__aexit__",
      "source_path": "tests/test_recipes_executor.py",
      "tests": [
        "tests/test_recipes_executor.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_recipes_executor.py::FakeToolExecutor.__init__",
      "qualified_name": "FakeToolExecutor.__init__",
      "name": "FakeToolExecutor.__init__",
      "source_path": "tests/test_recipes_executor.py",
      "tests": [
        "tests/test_recipes_executor.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_recipes_executor.py::FakeToolExecutor.call",
      "qualified_name": "FakeToolExecutor.call",
      "name": "FakeToolExecutor.call",
      "source_path": "tests/test_recipes_executor.py",
      "tests": [
        "tests/test_recipes_executor.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_recipes_executor.py::status_fn",
      "qualified_name": "status_fn",
      "name": "status_fn",
      "source_path": "tests/test_recipes_executor.py",
      "tests": [
        "tests/test_recipes_executor.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_recipes_executor.py::test_recipe_runner_dry_run",
      "qualified_name": "test_recipe_runner_dry_run",
      "name": "test_recipe_runner_dry_run",
      "source_path": "tests/test_recipes_executor.py",
      "tests": [
        "tests/test_recipes_executor.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_recipes_executor.py::test_recipe_runner_expect_failure",
      "qualified_name": "test_recipe_runner_expect_failure",
      "name": "test_recipe_runner_expect_failure",
      "source_path": "tests/test_recipes_executor.py",
      "tests": [
        "tests/test_recipes_executor.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_recipes_executor.py::test_recipe_runner_success",
      "qualified_name": "test_recipe_runner_success",
      "name": "test_recipe_runner_success",
      "source_path": "tests/test_recipes_executor.py",
      "tests": [
        "tests/test_recipes_executor.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_recipes_executor.py::test_recipe_runner_wait",
      "qualified_name": "test_recipe_runner_wait",
      "name": "test_recipe_runner_wait",
      "source_path": "tests/test_recipes_executor.py",
      "tests": [
        "tests/test_recipes_executor.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_release_scripts.py::_env_with_venv",
      "qualified_name": "_env_with_venv",
      "name": "_env_with_venv",
      "source_path": "tests/test_release_scripts.py",
      "tests": [
        "tests/test_release_scripts.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_release_scripts.py::test_build_wheel_script",
      "qualified_name": "test_build_wheel_script",
      "name": "test_build_wheel_script",
      "source_path": "tests/test_release_scripts.py",
      "tests": [
        "tests/test_release_scripts.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_release_scripts.py::test_checksums_script",
      "qualified_name": "test_checksums_script",
      "name": "test_checksums_script",
      "source_path": "tests/test_release_scripts.py",
      "tests": [
        "tests/test_release_scripts.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_release_scripts.py::test_generate_changelog",
      "qualified_name": "test_generate_changelog",
      "name": "test_generate_changelog",
      "source_path": "tests/test_release_scripts.py",
      "tests": [
        "tests/test_release_scripts.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_scheduler.py::_metric_value",
      "qualified_name": "_metric_value",
      "name": "_metric_value",
      "source_path": "tests/test_scheduler.py",
      "tests": [
        "tests/test_scheduler.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_scheduler.py::make_result",
      "qualified_name": "make_result",
      "name": "make_result",
      "source_path": "tests/test_scheduler.py",
      "tests": [
        "tests/test_scheduler.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_scheduler.py::make_scheduler",
      "qualified_name": "make_scheduler",
      "name": "make_scheduler",
      "source_path": "tests/test_scheduler.py",
      "tests": [
        "tests/test_scheduler.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_scheduler.py::reset_cache",
      "qualified_name": "reset_cache",
      "name": "reset_cache",
      "source_path": "tests/test_scheduler.py",
      "tests": [
        "tests/test_scheduler.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_scheduler.py::scheduler_settings",
      "qualified_name": "scheduler_settings",
      "name": "scheduler_settings",
      "source_path": "tests/test_scheduler.py",
      "tests": [
        "tests/test_scheduler.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_scheduler.py::test_scheduler_backup_failure_records_metrics",
      "qualified_name": "test_scheduler_backup_failure_records_metrics",
      "name": "test_scheduler_backup_failure_records_metrics",
      "source_path": "tests/test_scheduler.py",
      "tests": [
        "tests/test_scheduler.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_scheduler.py::test_scheduler_backup_run_records_metrics",
      "qualified_name": "test_scheduler_backup_run_records_metrics",
      "name": "test_scheduler_backup_run_records_metrics",
      "source_path": "tests/test_scheduler.py",
      "tests": [
        "tests/test_scheduler.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_scheduler.py::test_scheduler_requires_maintainer_token",
      "qualified_name": "test_scheduler_requires_maintainer_token",
      "name": "test_scheduler_requires_maintainer_token",
      "source_path": "tests/test_scheduler.py",
      "tests": [
        "tests/test_scheduler.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_scheduler.py::test_scheduler_runs_when_repo_head_changes",
      "qualified_name": "test_scheduler_runs_when_repo_head_changes",
      "name": "test_scheduler_runs_when_repo_head_changes",
      "source_path": "tests/test_scheduler.py",
      "tests": [
        "tests/test_scheduler.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_scheduler.py::test_scheduler_schedules_backup_job",
      "qualified_name": "test_scheduler_schedules_backup_job",
      "name": "test_scheduler_schedules_backup_job",
      "source_path": "tests/test_scheduler.py",
      "tests": [
        "tests/test_scheduler.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_scheduler.py::test_scheduler_skips_when_lock_contended",
      "qualified_name": "test_scheduler_skips_when_lock_contended",
      "name": "test_scheduler_skips_when_lock_contended",
      "source_path": "tests/test_scheduler.py",
      "tests": [
        "tests/test_scheduler.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_scheduler.py::test_scheduler_skips_when_repo_head_unchanged",
      "qualified_name": "test_scheduler_skips_when_repo_head_unchanged",
      "name": "test_scheduler_skips_when_repo_head_unchanged",
      "source_path": "tests/test_scheduler.py",
      "tests": [
        "tests/test_scheduler.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_scheduler.py::test_scheduler_start_uses_cron_trigger",
      "qualified_name": "test_scheduler_start_uses_cron_trigger",
      "name": "test_scheduler_start_uses_cron_trigger",
      "source_path": "tests/test_scheduler.py",
      "tests": [
        "tests/test_scheduler.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_scheduler.py::test_scheduler_start_uses_interval_trigger",
      "qualified_name": "test_scheduler_start_uses_interval_trigger",
      "name": "test_scheduler_start_uses_interval_trigger",
      "source_path": "tests/test_scheduler.py",
      "tests": [
        "tests/test_scheduler.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_api.py::DummySearchService",
      "qualified_name": "DummySearchService",
      "name": "DummySearchService",
      "source_path": "tests/test_search_api.py",
      "tests": [
        "tests/test_search_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_api.py::DummySearchService.__init__",
      "qualified_name": "DummySearchService.__init__",
      "name": "DummySearchService.__init__",
      "source_path": "tests/test_search_api.py",
      "tests": [
        "tests/test_search_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_api.py::DummySearchService.search",
      "qualified_name": "DummySearchService.search",
      "name": "DummySearchService.search",
      "source_path": "tests/test_search_api.py",
      "tests": [
        "tests/test_search_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_api.py::test_search_allows_maintainer_token",
      "qualified_name": "test_search_allows_maintainer_token",
      "name": "test_search_allows_maintainer_token",
      "source_path": "tests/test_search_api.py",
      "tests": [
        "tests/test_search_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_api.py::test_search_endpoint_returns_results",
      "qualified_name": "test_search_endpoint_returns_results",
      "name": "test_search_endpoint_returns_results",
      "source_path": "tests/test_search_api.py",
      "tests": [
        "tests/test_search_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_api.py::test_search_feedback_logged",
      "qualified_name": "test_search_feedback_logged",
      "name": "test_search_feedback_logged",
      "source_path": "tests/test_search_api.py",
      "tests": [
        "tests/test_search_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_api.py::test_search_filters_invalid_max_age",
      "qualified_name": "test_search_filters_invalid_max_age",
      "name": "test_search_filters_invalid_max_age",
      "source_path": "tests/test_search_api.py",
      "tests": [
        "tests/test_search_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_api.py::test_search_filters_invalid_namespaces",
      "qualified_name": "test_search_filters_invalid_namespaces",
      "name": "test_search_filters_invalid_namespaces",
      "source_path": "tests/test_search_api.py",
      "tests": [
        "tests/test_search_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_api.py::test_search_filters_invalid_symbol_language",
      "qualified_name": "test_search_filters_invalid_symbol_language",
      "name": "test_search_filters_invalid_symbol_language",
      "source_path": "tests/test_search_api.py",
      "tests": [
        "tests/test_search_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_api.py::test_search_filters_invalid_symbol_types",
      "qualified_name": "test_search_filters_invalid_symbol_types",
      "name": "test_search_filters_invalid_symbol_types",
      "source_path": "tests/test_search_api.py",
      "tests": [
        "tests/test_search_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_api.py::test_search_filters_invalid_type",
      "qualified_name": "test_search_filters_invalid_type",
      "name": "test_search_filters_invalid_type",
      "source_path": "tests/test_search_api.py",
      "tests": [
        "tests/test_search_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_api.py::test_search_filters_invalid_updated_after",
      "qualified_name": "test_search_filters_invalid_updated_after",
      "name": "test_search_filters_invalid_updated_after",
      "source_path": "tests/test_search_api.py",
      "tests": [
        "tests/test_search_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_api.py::test_search_filters_passed_to_service",
      "qualified_name": "test_search_filters_passed_to_service",
      "name": "test_search_filters_passed_to_service",
      "source_path": "tests/test_search_api.py",
      "tests": [
        "tests/test_search_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_api.py::test_search_requires_reader_token",
      "qualified_name": "test_search_requires_reader_token",
      "name": "test_search_requires_reader_token",
      "source_path": "tests/test_search_api.py",
      "tests": [
        "tests/test_search_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_api.py::test_search_reuses_incoming_request_id",
      "qualified_name": "test_search_reuses_incoming_request_id",
      "name": "test_search_reuses_incoming_request_id",
      "source_path": "tests/test_search_api.py",
      "tests": [
        "tests/test_search_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_api.py::test_search_weights_endpoint",
      "qualified_name": "test_search_weights_endpoint",
      "name": "test_search_weights_endpoint",
      "source_path": "tests/test_search_api.py",
      "tests": [
        "tests/test_search_api.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_cli_show_weights.py::clear_settings_cache",
      "qualified_name": "clear_settings_cache",
      "name": "clear_settings_cache",
      "source_path": "tests/test_search_cli_show_weights.py",
      "tests": [
        "tests/test_search_cli_show_weights.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_cli_show_weights.py::test_show_weights_command",
      "qualified_name": "test_show_weights_command",
      "name": "test_show_weights_command",
      "source_path": "tests/test_search_cli_show_weights.py",
      "tests": [
        "tests/test_search_cli_show_weights.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_evaluation.py::test_evaluate_cli",
      "qualified_name": "test_evaluate_cli",
      "name": "test_evaluate_cli",
      "source_path": "tests/test_search_evaluation.py",
      "tests": [
        "tests/test_search_evaluation.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_evaluation.py::test_evaluate_model",
      "qualified_name": "test_evaluate_model",
      "name": "test_evaluate_model",
      "source_path": "tests/test_search_evaluation.py",
      "tests": [
        "tests/test_search_evaluation.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_evaluation.py::test_evaluate_model_with_empty_dataset",
      "qualified_name": "test_evaluate_model_with_empty_dataset",
      "name": "test_evaluate_model_with_empty_dataset",
      "source_path": "tests/test_search_evaluation.py",
      "tests": [
        "tests/test_search_evaluation.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_exporter.py::_sample_event",
      "qualified_name": "_sample_event",
      "name": "_sample_event",
      "source_path": "tests/test_search_exporter.py",
      "tests": [
        "tests/test_search_exporter.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_exporter.py::_write_events",
      "qualified_name": "_write_events",
      "name": "_write_events",
      "source_path": "tests/test_search_exporter.py",
      "tests": [
        "tests/test_search_exporter.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_exporter.py::test_export_training_data_cli",
      "qualified_name": "test_export_training_data_cli",
      "name": "test_export_training_data_cli",
      "source_path": "tests/test_search_exporter.py",
      "tests": [
        "tests/test_search_exporter.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_exporter.py::test_export_training_dataset_csv",
      "qualified_name": "test_export_training_dataset_csv",
      "name": "test_export_training_dataset_csv",
      "source_path": "tests/test_search_exporter.py",
      "tests": [
        "tests/test_search_exporter.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_exporter.py::test_train_model_cli",
      "qualified_name": "test_train_model_cli",
      "name": "test_train_model_cli",
      "source_path": "tests/test_search_exporter.py",
      "tests": [
        "tests/test_search_exporter.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_exporter.py::test_train_model_from_dataset",
      "qualified_name": "test_train_model_from_dataset",
      "name": "test_train_model_from_dataset",
      "source_path": "tests/test_search_exporter.py",
      "tests": [
        "tests/test_search_exporter.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_feedback.py::_make_response",
      "qualified_name": "_make_response",
      "name": "_make_response",
      "source_path": "tests/test_search_feedback.py",
      "tests": [
        "tests/test_search_feedback.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_feedback.py::test_feedback_store_rotates_when_threshold_exceeded",
      "qualified_name": "test_feedback_store_rotates_when_threshold_exceeded",
      "name": "test_feedback_store_rotates_when_threshold_exceeded",
      "source_path": "tests/test_search_feedback.py",
      "tests": [
        "tests/test_search_feedback.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_feedback.py::test_feedback_store_writes_entries",
      "qualified_name": "test_feedback_store_writes_entries",
      "name": "test_feedback_store_writes_entries",
      "source_path": "tests/test_search_feedback.py",
      "tests": [
        "tests/test_search_feedback.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_maintenance.py::_write_events",
      "qualified_name": "_write_events",
      "name": "_write_events",
      "source_path": "tests/test_search_maintenance.py",
      "tests": [
        "tests/test_search_maintenance.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_maintenance.py::test_prune_feedback_log_by_age",
      "qualified_name": "test_prune_feedback_log_by_age",
      "name": "test_prune_feedback_log_by_age",
      "source_path": "tests/test_search_maintenance.py",
      "tests": [
        "tests/test_search_maintenance.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_maintenance.py::test_prune_feedback_log_empty_file",
      "qualified_name": "test_prune_feedback_log_empty_file",
      "name": "test_prune_feedback_log_empty_file",
      "source_path": "tests/test_search_maintenance.py",
      "tests": [
        "tests/test_search_maintenance.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_maintenance.py::test_prune_feedback_log_guard_when_pruning_everything",
      "qualified_name": "test_prune_feedback_log_guard_when_pruning_everything",
      "name": "test_prune_feedback_log_guard_when_pruning_everything",
      "source_path": "tests/test_search_maintenance.py",
      "tests": [
        "tests/test_search_maintenance.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_maintenance.py::test_prune_feedback_log_max_requests_prefers_newest",
      "qualified_name": "test_prune_feedback_log_max_requests_prefers_newest",
      "name": "test_prune_feedback_log_max_requests_prefers_newest",
      "source_path": "tests/test_search_maintenance.py",
      "tests": [
        "tests/test_search_maintenance.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_maintenance.py::test_prune_feedback_log_missing_file",
      "qualified_name": "test_prune_feedback_log_missing_file",
      "name": "test_prune_feedback_log_missing_file",
      "source_path": "tests/test_search_maintenance.py",
      "tests": [
        "tests/test_search_maintenance.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_maintenance.py::test_prune_feedback_log_parses_various_timestamp_formats",
      "qualified_name": "test_prune_feedback_log_parses_various_timestamp_formats",
      "name": "test_prune_feedback_log_parses_various_timestamp_formats",
      "source_path": "tests/test_search_maintenance.py",
      "tests": [
        "tests/test_search_maintenance.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_maintenance.py::test_prune_feedback_log_requires_limit",
      "qualified_name": "test_prune_feedback_log_requires_limit",
      "name": "test_prune_feedback_log_requires_limit",
      "source_path": "tests/test_search_maintenance.py",
      "tests": [
        "tests/test_search_maintenance.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_maintenance.py::test_redact_dataset_csv",
      "qualified_name": "test_redact_dataset_csv",
      "name": "test_redact_dataset_csv",
      "source_path": "tests/test_search_maintenance.py",
      "tests": [
        "tests/test_search_maintenance.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_maintenance.py::test_redact_dataset_csv_handles_missing_and_blank_fields",
      "qualified_name": "test_redact_dataset_csv_handles_missing_and_blank_fields",
      "name": "test_redact_dataset_csv_handles_missing_and_blank_fields",
      "source_path": "tests/test_search_maintenance.py",
      "tests": [
        "tests/test_search_maintenance.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_maintenance.py::test_redact_dataset_jsonl",
      "qualified_name": "test_redact_dataset_jsonl",
      "name": "test_redact_dataset_jsonl",
      "source_path": "tests/test_search_maintenance.py",
      "tests": [
        "tests/test_search_maintenance.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_maintenance.py::test_redact_dataset_jsonl_handles_blank_lines",
      "qualified_name": "test_redact_dataset_jsonl_handles_blank_lines",
      "name": "test_redact_dataset_jsonl_handles_blank_lines",
      "source_path": "tests/test_search_maintenance.py",
      "tests": [
        "tests/test_search_maintenance.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_maintenance.py::test_redact_dataset_jsonl_handles_missing_and_blank_fields",
      "qualified_name": "test_redact_dataset_jsonl_handles_missing_and_blank_fields",
      "name": "test_redact_dataset_jsonl_handles_missing_and_blank_fields",
      "source_path": "tests/test_search_maintenance.py",
      "tests": [
        "tests/test_search_maintenance.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_maintenance.py::test_redact_dataset_missing_file",
      "qualified_name": "test_redact_dataset_missing_file",
      "name": "test_redact_dataset_missing_file",
      "source_path": "tests/test_search_maintenance.py",
      "tests": [
        "tests/test_search_maintenance.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_maintenance.py::test_redact_dataset_output_path_copies_metadata",
      "qualified_name": "test_redact_dataset_output_path_copies_metadata",
      "name": "test_redact_dataset_output_path_copies_metadata",
      "source_path": "tests/test_search_maintenance.py",
      "tests": [
        "tests/test_search_maintenance.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_maintenance.py::test_redact_dataset_unsupported_suffix",
      "qualified_name": "test_redact_dataset_unsupported_suffix",
      "name": "test_redact_dataset_unsupported_suffix",
      "source_path": "tests/test_search_maintenance.py",
      "tests": [
        "tests/test_search_maintenance.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_profiles.py::clear_weight_env",
      "qualified_name": "clear_weight_env",
      "name": "clear_weight_env",
      "source_path": "tests/test_search_profiles.py",
      "tests": [
        "tests/test_search_profiles.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_profiles.py::test_resolved_search_weights_default",
      "qualified_name": "test_resolved_search_weights_default",
      "name": "test_resolved_search_weights_default",
      "source_path": "tests/test_search_profiles.py",
      "tests": [
        "tests/test_search_profiles.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_profiles.py::test_resolved_search_weights_overrides",
      "qualified_name": "test_resolved_search_weights_overrides",
      "name": "test_resolved_search_weights_overrides",
      "source_path": "tests/test_search_profiles.py",
      "tests": [
        "tests/test_search_profiles.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_profiles.py::test_resolved_search_weights_profile_selection",
      "qualified_name": "test_resolved_search_weights_profile_selection",
      "name": "test_resolved_search_weights_profile_selection",
      "source_path": "tests/test_search_profiles.py",
      "tests": [
        "tests/test_search_profiles.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::CountingGraphService",
      "qualified_name": "CountingGraphService",
      "name": "CountingGraphService",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::CountingGraphService.__init__",
      "qualified_name": "CountingGraphService.__init__",
      "name": "CountingGraphService.__init__",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::CountingGraphService.get_node",
      "qualified_name": "CountingGraphService.get_node",
      "name": "CountingGraphService.get_node",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::CountingGraphService.get_subsystem",
      "qualified_name": "CountingGraphService.get_subsystem",
      "name": "CountingGraphService.get_subsystem",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::CountingGraphService.run_cypher",
      "qualified_name": "CountingGraphService.run_cypher",
      "name": "CountingGraphService.run_cypher",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::CountingGraphService.search",
      "qualified_name": "CountingGraphService.search",
      "name": "CountingGraphService.search",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::CountingGraphService.shortest_path_depth",
      "qualified_name": "CountingGraphService.shortest_path_depth",
      "name": "CountingGraphService.shortest_path_depth",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::DummyGraphService",
      "qualified_name": "DummyGraphService",
      "name": "DummyGraphService",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::DummyGraphService.__init__",
      "qualified_name": "DummyGraphService.__init__",
      "name": "DummyGraphService.__init__",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::DummyGraphService.get_node",
      "qualified_name": "DummyGraphService.get_node",
      "name": "DummyGraphService.get_node",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::DummyGraphService.get_subsystem",
      "qualified_name": "DummyGraphService.get_subsystem",
      "name": "DummyGraphService.get_subsystem",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::DummyGraphService.run_cypher",
      "qualified_name": "DummyGraphService.run_cypher",
      "name": "DummyGraphService.run_cypher",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::DummyGraphService.search",
      "qualified_name": "DummyGraphService.search",
      "name": "DummyGraphService.search",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::DummyGraphService.shortest_path_depth",
      "qualified_name": "DummyGraphService.shortest_path_depth",
      "name": "DummyGraphService.shortest_path_depth",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::FakeEmbedder",
      "qualified_name": "FakeEmbedder",
      "name": "FakeEmbedder",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::FakeEmbedder.encode",
      "qualified_name": "FakeEmbedder.encode",
      "name": "FakeEmbedder.encode",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::FakePoint",
      "qualified_name": "FakePoint",
      "name": "FakePoint",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::FakePoint.__init__",
      "qualified_name": "FakePoint.__init__",
      "name": "FakePoint.__init__",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::FakeQdrantClient",
      "qualified_name": "FakeQdrantClient",
      "name": "FakeQdrantClient",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::FakeQdrantClient.__init__",
      "qualified_name": "FakeQdrantClient.__init__",
      "name": "FakeQdrantClient.__init__",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::FakeQdrantClient.search",
      "qualified_name": "FakeQdrantClient.search",
      "name": "FakeQdrantClient.search",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::MapGraphService",
      "qualified_name": "MapGraphService",
      "name": "MapGraphService",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::MapGraphService.__init__",
      "qualified_name": "MapGraphService.__init__",
      "name": "MapGraphService.__init__",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::MapGraphService.get_node",
      "qualified_name": "MapGraphService.get_node",
      "name": "MapGraphService.get_node",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::MapGraphService.get_subsystem",
      "qualified_name": "MapGraphService.get_subsystem",
      "name": "MapGraphService.get_subsystem",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::MapGraphService.run_cypher",
      "qualified_name": "MapGraphService.run_cypher",
      "name": "MapGraphService.run_cypher",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::MapGraphService.search",
      "qualified_name": "MapGraphService.search",
      "name": "MapGraphService.search",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::MapGraphService.shortest_path_depth",
      "qualified_name": "MapGraphService.shortest_path_depth",
      "name": "MapGraphService.shortest_path_depth",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::SlowGraphService",
      "qualified_name": "SlowGraphService",
      "name": "SlowGraphService",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::SlowGraphService.__init__",
      "qualified_name": "SlowGraphService.__init__",
      "name": "SlowGraphService.__init__",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::SlowGraphService.get_node",
      "qualified_name": "SlowGraphService.get_node",
      "name": "SlowGraphService.get_node",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::_metric_value",
      "qualified_name": "_metric_value",
      "name": "_metric_value",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::graph_response",
      "qualified_name": "graph_response",
      "name": "graph_response",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::sample_points",
      "qualified_name": "sample_points",
      "name": "sample_points",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::test_lexical_score_affects_ranking",
      "qualified_name": "test_lexical_score_affects_ranking",
      "name": "test_lexical_score_affects_ranking",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::test_search_hnsw_search_params",
      "qualified_name": "test_search_hnsw_search_params",
      "name": "test_search_hnsw_search_params",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::test_search_service_caches_graph_lookups",
      "qualified_name": "test_search_service_caches_graph_lookups",
      "name": "test_search_service_caches_graph_lookups",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::test_search_service_enriches_with_graph",
      "qualified_name": "test_search_service_enriches_with_graph",
      "name": "test_search_service_enriches_with_graph",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::test_search_service_filters_artifact_types",
      "qualified_name": "test_search_service_filters_artifact_types",
      "name": "test_search_service_filters_artifact_types",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::test_search_service_filters_namespaces",
      "qualified_name": "test_search_service_filters_namespaces",
      "name": "test_search_service_filters_namespaces",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::test_search_service_filters_recency_max_age_days",
      "qualified_name": "test_search_service_filters_recency_max_age_days",
      "name": "test_search_service_filters_recency_max_age_days",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::test_search_service_filters_recency_updated_after",
      "qualified_name": "test_search_service_filters_recency_updated_after",
      "name": "test_search_service_filters_recency_updated_after",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::test_search_service_filters_subsystem_via_graph",
      "qualified_name": "test_search_service_filters_subsystem_via_graph",
      "name": "test_search_service_filters_subsystem_via_graph",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::test_search_service_filters_tags",
      "qualified_name": "test_search_service_filters_tags",
      "name": "test_search_service_filters_tags",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::test_search_service_handles_missing_graph",
      "qualified_name": "test_search_service_handles_missing_graph",
      "name": "test_search_service_handles_missing_graph",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::test_search_service_limits_graph_results",
      "qualified_name": "test_search_service_limits_graph_results",
      "name": "test_search_service_limits_graph_results",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::test_search_service_ml_model_reorders_results",
      "qualified_name": "test_search_service_ml_model_reorders_results",
      "name": "test_search_service_ml_model_reorders_results",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::test_search_service_orders_by_adjusted_score",
      "qualified_name": "test_search_service_orders_by_adjusted_score",
      "name": "test_search_service_orders_by_adjusted_score",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_search_service.py::test_search_service_respects_graph_time_budget",
      "qualified_name": "test_search_service_respects_graph_time_budget",
      "name": "test_search_service_respects_graph_time_budget",
      "source_path": "tests/test_search_service.py",
      "tests": [
        "tests/test_search_service.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_settings_defaults.py::test_auth_enabled_defaults_true",
      "qualified_name": "test_auth_enabled_defaults_true",
      "name": "test_auth_enabled_defaults_true",
      "source_path": "tests/test_settings_defaults.py",
      "tests": [
        "tests/test_settings_defaults.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_settings_defaults.py::test_editor_uri_template_defaults_none",
      "qualified_name": "test_editor_uri_template_defaults_none",
      "name": "test_editor_uri_template_defaults_none",
      "source_path": "tests/test_settings_defaults.py",
      "tests": [
        "tests/test_settings_defaults.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_settings_defaults.py::test_editor_uri_template_respects_env",
      "qualified_name": "test_editor_uri_template_respects_env",
      "name": "test_editor_uri_template_respects_env",
      "source_path": "tests/test_settings_defaults.py",
      "tests": [
        "tests/test_settings_defaults.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_settings_defaults.py::test_neo4j_auth_enabled_defaults_true",
      "qualified_name": "test_neo4j_auth_enabled_defaults_true",
      "name": "test_neo4j_auth_enabled_defaults_true",
      "source_path": "tests/test_settings_defaults.py",
      "tests": [
        "tests/test_settings_defaults.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_settings_defaults.py::test_neo4j_database_defaults_to_neo4j",
      "qualified_name": "test_neo4j_database_defaults_to_neo4j",
      "name": "test_neo4j_database_defaults_to_neo4j",
      "source_path": "tests/test_settings_defaults.py",
      "tests": [
        "tests/test_settings_defaults.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_settings_defaults.py::test_symbols_disabled_by_default",
      "qualified_name": "test_symbols_disabled_by_default",
      "name": "test_symbols_disabled_by_default",
      "source_path": "tests/test_settings_defaults.py",
      "tests": [
        "tests/test_settings_defaults.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_settings_defaults.py::test_symbols_flag_respects_env",
      "qualified_name": "test_symbols_flag_respects_env",
      "name": "test_symbols_flag_respects_env",
      "source_path": "tests/test_settings_defaults.py",
      "tests": [
        "tests/test_settings_defaults.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_symbol_extraction.py::test_extract_python_symbols_simple",
      "qualified_name": "test_extract_python_symbols_simple",
      "name": "test_extract_python_symbols_simple",
      "source_path": "tests/test_symbol_extraction.py",
      "tests": [
        "tests/test_symbol_extraction.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_symbol_linking.py::make_artifact",
      "qualified_name": "make_artifact",
      "name": "make_artifact",
      "source_path": "tests/test_symbol_linking.py",
      "tests": [
        "tests/test_symbol_linking.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_symbol_linking.py::test_annotate_links_ignores_unrelated_tokens",
      "qualified_name": "test_annotate_links_ignores_unrelated_tokens",
      "name": "test_annotate_links_ignores_unrelated_tokens",
      "source_path": "tests/test_symbol_linking.py",
      "tests": [
        "tests/test_symbol_linking.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_symbol_linking.py::test_annotate_links_matches_method_reference",
      "qualified_name": "test_annotate_links_matches_method_reference",
      "name": "test_annotate_links_matches_method_reference",
      "source_path": "tests/test_symbol_linking.py",
      "tests": [
        "tests/test_symbol_linking.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_tracing.py::DummyBatchProcessor",
      "qualified_name": "DummyBatchProcessor",
      "name": "DummyBatchProcessor",
      "source_path": "tests/test_tracing.py",
      "tests": [
        "tests/test_tracing.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_tracing.py::DummyBatchProcessor.__init__",
      "qualified_name": "DummyBatchProcessor.__init__",
      "name": "DummyBatchProcessor.__init__",
      "source_path": "tests/test_tracing.py",
      "tests": [
        "tests/test_tracing.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_tracing.py::DummyBatchProcessor.shutdown",
      "qualified_name": "DummyBatchProcessor.shutdown",
      "name": "DummyBatchProcessor.shutdown",
      "source_path": "tests/test_tracing.py",
      "tests": [
        "tests/test_tracing.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_tracing.py::DummySimpleProcessor",
      "qualified_name": "DummySimpleProcessor",
      "name": "DummySimpleProcessor",
      "source_path": "tests/test_tracing.py",
      "tests": [
        "tests/test_tracing.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_tracing.py::fake_instrument_app",
      "qualified_name": "fake_instrument_app",
      "name": "fake_instrument_app",
      "source_path": "tests/test_tracing.py",
      "tests": [
        "tests/test_tracing.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_tracing.py::test_tracing_console_fallback",
      "qualified_name": "test_tracing_console_fallback",
      "name": "test_tracing_console_fallback",
      "source_path": "tests/test_tracing.py",
      "tests": [
        "tests/test_tracing.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_tracing.py::test_tracing_disabled_by_default",
      "qualified_name": "test_tracing_disabled_by_default",
      "name": "test_tracing_disabled_by_default",
      "source_path": "tests/test_tracing.py",
      "tests": [
        "tests/test_tracing.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_tracing.py::test_tracing_enabled_instruments_app",
      "qualified_name": "test_tracing_enabled_instruments_app",
      "name": "test_tracing_enabled_instruments_app",
      "source_path": "tests/test_tracing.py",
      "tests": [
        "tests/test_tracing.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_tracing.py::test_tracing_uses_otlp_exporter",
      "qualified_name": "test_tracing_uses_otlp_exporter",
      "name": "test_tracing_uses_otlp_exporter",
      "source_path": "tests/test_tracing.py",
      "tests": [
        "tests/test_tracing.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ui_routes.py::_reset_settings",
      "qualified_name": "_reset_settings",
      "name": "_reset_settings",
      "source_path": "tests/test_ui_routes.py",
      "tests": [
        "tests/test_ui_routes.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ui_routes.py::stub_dependency_initialisation",
      "qualified_name": "stub_dependency_initialisation",
      "name": "stub_dependency_initialisation",
      "source_path": "tests/test_ui_routes.py",
      "tests": [
        "tests/test_ui_routes.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ui_routes.py::test_ui_events_endpoint",
      "qualified_name": "test_ui_events_endpoint",
      "name": "test_ui_events_endpoint",
      "source_path": "tests/test_ui_routes.py",
      "tests": [
        "tests/test_ui_routes.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ui_routes.py::test_ui_landing_served",
      "qualified_name": "test_ui_landing_served",
      "name": "test_ui_landing_served",
      "source_path": "tests/test_ui_routes.py",
      "tests": [
        "tests/test_ui_routes.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ui_routes.py::test_ui_lifecycle_download",
      "qualified_name": "test_ui_lifecycle_download",
      "name": "test_ui_lifecycle_download",
      "source_path": "tests/test_ui_routes.py",
      "tests": [
        "tests/test_ui_routes.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ui_routes.py::test_ui_routes_require_auth_when_enabled",
      "qualified_name": "test_ui_routes_require_auth_when_enabled",
      "name": "test_ui_routes_require_auth_when_enabled",
      "source_path": "tests/test_ui_routes.py",
      "tests": [
        "tests/test_ui_routes.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ui_routes.py::test_ui_search_view",
      "qualified_name": "test_ui_search_view",
      "name": "test_ui_search_view",
      "source_path": "tests/test_ui_routes.py",
      "tests": [
        "tests/test_ui_routes.py"
      ],
      "status": "Covered"
    },
    {
      "symbol_id": "tests/test_ui_routes.py::test_ui_subsystems_view",
      "qualified_name": "test_ui_subsystems_view",
      "name": "test_ui_subsystems_view",
      "source_path": "tests/test_ui_routes.py",
      "tests": [
        "tests/test_ui_routes.py"
      ],
      "status": "Covered"
    }
  ],
  "symbol_test_gaps": [],
  "summary": {
    "stale_docs": 0,
    "isolated_nodes": 72,
    "subsystems_missing_tests": 0,
    "removed_artifacts": 0,
    "symbol_tests": 540,
    "symbol_test_gaps": 0
  }
}