#!/usr/bin/env bash
set -euo pipefail

usage() {
  cat <<'USAGE'
Usage: bin/km-rotate-neo4j-password [--secrets PATH] [--container NAME]

Rotate the Neo4j password for a running Duskmantle gateway container.

Steps performed:
  1. Generate a strong random password.
  2. Update the secrets environment file (default: .duskmantle/secrets.env).
  3. Stop the running container (default name: duskmantle).
  4. Remove stale Neo4j auth credentials from the state directory.
  5. Relaunch the gateway via bin/km-run with the new password.

Options:
  --secrets PATH     Secrets env file to update (default: .duskmantle/secrets.env)
  --container NAME   Container name (default: value of KM_CONTAINER_NAME in secrets or 'duskmantle')
  --help             Show this help text.
USAGE
}

SECRETS_FILE="$(pwd)/.duskmantle/secrets.env"
CONTAINER_NAME=""

while [[ $# -gt 0 ]]; do
  case "$1" in
    --secrets)
      SECRETS_FILE="$2"
      shift 2
      ;;
    --container)
      CONTAINER_NAME="$2"
      shift 2
      ;;
    --help)
      usage
      exit 0
      ;;
    *)
      echo "Unknown argument: $1" >&2
      usage >&2
      exit 1
      ;;
  esac
done

if [[ ! -f "$SECRETS_FILE" ]]; then
  echo "Secrets file not found: $SECRETS_FILE" >&2
  exit 1
fi

# Load current secrets
set -a
source "$SECRETS_FILE"
set +a

CONTAINER_NAME=${CONTAINER_NAME:-${KM_CONTAINER_NAME:-duskmantle}}
STATE_DIR=${KM_DATA_DIR:-$(pwd)/.duskmantle/config}
REPO_DIR=${KM_REPO_DIR:-$(pwd)/.duskmantle/data}
IMAGE=${KM_IMAGE:-duskmantle/km:dev}
AUTH_ENABLED=${KM_NEO4J_AUTH_ENABLED:-true}

if [[ "${AUTH_ENABLED,,}" == "false" ]]; then
  echo "KM_NEO4J_AUTH_ENABLED is false; no password rotation required." >&2
  exit 1
fi

if ! command -v docker >/dev/null 2>&1; then
  echo "docker command not found" >&2
  exit 1
fi

# Generate new password
NEW_PASSWORD=$(python - <<'PY'
import secrets
import string
alphabet = string.ascii_letters + string.digits
print(''.join(secrets.choice(alphabet) for _ in range(32)))
PY
)

echo "Generated new password; updating secrets file"
TMP_FILE="$(mktemp)"
awk -v pwd="$NEW_PASSWORD" '
BEGIN { updated=0 }
/^KM_NEO4J_PASSWORD=/ { print "KM_NEO4J_PASSWORD=" pwd; updated=1; next }
{ print }
END { if (!updated) print "KM_NEO4J_PASSWORD=" pwd }
' "$SECRETS_FILE" > "$TMP_FILE"
chmod --reference="$SECRETS_FILE" "$TMP_FILE"
mv "$TMP_FILE" "$SECRETS_FILE"

# Stop running container if present
if docker ps --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
  echo "Stopping running container ${CONTAINER_NAME}"
  docker stop "$CONTAINER_NAME" >/dev/null
fi

# Remove Neo4j auth file to force new password on next start
AUTH_FILE="$STATE_DIR/neo4j/data/dbms/auth"
if [[ -f "$AUTH_FILE" ]]; then
  echo "Removing existing Neo4j auth file"
  rm -f "$AUTH_FILE"
fi

# Relaunch container using updated secrets
set -a
source "$SECRETS_FILE"
set +a

export KM_IMAGE="${KM_IMAGE:-$IMAGE}"
export KM_DATA_DIR="$STATE_DIR"
export KM_REPO_DIR="$REPO_DIR"
export KM_NEO4J_PASSWORD="$KM_NEO4J_PASSWORD"
export KM_NEO4J_AUTH_ENABLED="${KM_NEO4J_AUTH_ENABLED:-true}"
export KM_AUTH_ENABLED="${KM_AUTH_ENABLED:-false}"
export KM_READER_TOKEN="${KM_READER_TOKEN:-}"
export KM_ADMIN_TOKEN="${KM_ADMIN_TOKEN:-}"

RUN_ENV_ARGS=(
  "-e" "KM_NEO4J_PASSWORD=${KM_NEO4J_PASSWORD}"
  "-e" "KM_NEO4J_AUTH_ENABLED=${KM_NEO4J_AUTH_ENABLED:-true}"
)

if [[ -n ${KM_AUTH_ENABLED:-} ]]; then
  RUN_ENV_ARGS+=("-e" "KM_AUTH_ENABLED=${KM_AUTH_ENABLED}")
fi
if [[ -n ${KM_READER_TOKEN:-} ]]; then
  RUN_ENV_ARGS+=("-e" "KM_READER_TOKEN=${KM_READER_TOKEN}")
fi
if [[ -n ${KM_ADMIN_TOKEN:-} ]]; then
  RUN_ENV_ARGS+=("-e" "KM_ADMIN_TOKEN=${KM_ADMIN_TOKEN}")
fi

export KM_DOCKER_RUN_ARGS="${RUN_ENV_ARGS[*]}"

bin/km-run --detach

echo "Neo4j password rotated. New credentials stored in $SECRETS_FILE"
