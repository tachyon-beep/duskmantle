#!/usr/bin/env bash
set -euo pipefail

usage() {
  cat <<'USAGE'
Usage: bin/km-rotate-neo4j-password [--secrets PATH] [--compose-dir PATH] [--project NAME]

Rotate the Neo4j password for a Duskmantle docker compose deployment.

Steps performed:
  1. Generate a new password and update the secrets file (default: .duskmantle/secrets.env).
  2. Remove the persisted Neo4j auth file so the new password can be applied.
  3. Restart the neo4j and gateway services via docker compose.

Options:
  --secrets PATH     Secrets env file to update (default: .duskmantle/secrets.env)
  --compose-dir PATH Compose project directory (default: .duskmantle/compose)
  --project NAME     Compose project name (default: duskmantle)
  --help             Show this help text.
USAGE
}

SECRETS_FILE="$(pwd)/.duskmantle/secrets.env"
COMPOSE_DIR="$(pwd)/.duskmantle/compose"
PROJECT="duskmantle"

while [[ $# -gt 0 ]]; do
  case "$1" in
    --secrets)
      SECRETS_FILE="$2"
      shift 2
      ;;
    --compose-dir)
      COMPOSE_DIR="$2"
      shift 2
      ;;
    --project)
      PROJECT="$2"
      shift 2
      ;;
    --help)
      usage
      exit 0
      ;;
    *)
      echo "Unknown argument: $1" >&2
      usage >&2
      exit 1
      ;;
  esac
done

if [[ ! -f "$SECRETS_FILE" ]]; then
  echo "Secrets file not found: $SECRETS_FILE" >&2
  exit 1
fi

if ! command -v docker >/dev/null 2>&1; then
  echo "docker command not found" >&2
  exit 1
fi

if ! docker compose version >/dev/null 2>&1; then
  echo "docker compose plugin is required" >&2
  exit 1
fi

# Load current secrets.
set -a
# shellcheck disable=SC1090
source "$SECRETS_FILE"
set +a

COMPOSE_ENV_FILE="$COMPOSE_DIR/gateway.env"
if [[ ! -e "$COMPOSE_ENV_FILE" ]]; then
  echo "Compose environment file not found: $COMPOSE_ENV_FILE" >&2
  exit 1
fi

# Generate new password.
NEW_PASSWORD=$(python - <<'PY'
import secrets
import string
alphabet = string.ascii_letters + string.digits
print(''.join(secrets.choice(alphabet) for _ in range(32)))
PY
)

echo "Generated new Neo4j password"

# Update secrets file.
TMP_FILE="$(mktemp)"
awk -v pwd="$NEW_PASSWORD" '
BEGIN { updated=0 }
/^KM_NEO4J_PASSWORD=/ { print "KM_NEO4J_PASSWORD=" pwd; updated=1; next }
{ print }
END { if (!updated) print "KM_NEO4J_PASSWORD=" pwd }
' "$SECRETS_FILE" > "$TMP_FILE"
chmod --reference="$SECRETS_FILE" "$TMP_FILE"
mv "$TMP_FILE" "$SECRETS_FILE"

# Ensure the compose env (symlink) reflects new password.
if [[ -L "$COMPOSE_ENV_FILE" ]]; then
  :
else
  cp "$SECRETS_FILE" "$COMPOSE_ENV_FILE"
fi

# Remove Neo4j auth file to force password reset.
AUTH_FILE="$COMPOSE_DIR/config/neo4j/data/dbms/auth"
if [[ -f "$AUTH_FILE" ]]; then
  echo "Removing existing Neo4j auth file at $AUTH_FILE"
  rm -f "$AUTH_FILE"
fi

export KM_NEO4J_PASSWORD="$NEW_PASSWORD"

pushd "$COMPOSE_DIR" >/dev/null

docker compose --project-name "$PROJECT" stop gateway neo4j >/dev/null 2>&1 || true

docker compose --project-name "$PROJECT" up -d neo4j

echo "Waiting for Neo4j to report healthy..."
for _ in {1..30}; do
  status=$(docker compose --project-name "$PROJECT" ps --status running --services neo4j 2>/dev/null | wc -l)
  if [[ "$status" -gt 0 ]]; then
    if docker compose --project-name "$PROJECT" exec -T neo4j cypher-shell -u neo4j -p "$NEW_PASSWORD" "SHOW DATABASES" >/dev/null 2>&1; then
      break
    fi
  fi
  sleep 2
done

docker compose --project-name "$PROJECT" up -d gateway

popd >/dev/null

echo "Neo4j password rotated. Update propagated to compose deployment."
echo "New password stored in $SECRETS_FILE"
