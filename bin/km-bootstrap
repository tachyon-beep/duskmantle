#!/usr/bin/env bash
set -euo pipefail

IMAGE_DEFAULT="ghcr.io/tachyon-beep/duskmantle-km:latest"
FORCE="false"
IMAGE="$IMAGE_DEFAULT"

usage() {
  cat <<'USAGE'
Usage: km-bootstrap [--image IMAGE] [--force]

Pull the Duskmantle gateway image, generate secure defaults, and launch it with
`.duskmantle/config` mapped to state and `.duskmantle/data` mapped to the
repository workload.

Options:
  --image IMAGE   Override the container image tag (default: ghcr.io/tachyon-beep/duskmantle-km:latest)
  --force         Regenerate credentials even if .duskmantle/secrets.env exists
  --help          Show this help text
USAGE
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --image)
      IMAGE="$2"
      shift 2
      ;;
    --force)
      FORCE="true"
      shift
      ;;
    --help)
      usage
      exit 0
      ;;
    *)
      echo "Unknown argument: $1" >&2
      usage >&2
      exit 1
      ;;
  esac
done

BASE_DIR="$(pwd)/.duskmantle"
CONFIG_DIR="$BASE_DIR/config"
DATA_DIR="$BASE_DIR/data"
BACKUP_DIR="$BASE_DIR/backups"
ENV_FILE="$BASE_DIR/secrets.env"

mkdir -p "$CONFIG_DIR" "$DATA_DIR" "$BACKUP_DIR"

declare -a secrets
if [[ ! -f "$ENV_FILE" || $FORCE == "true" ]]; then
  mapfile -t secrets < <(python <<'PY'
import secrets
import string
import uuid
alphabet = string.ascii_letters + string.digits
reader = str(uuid.uuid4())
admin = str(uuid.uuid4())
password = ''.join(secrets.choice(alphabet) for _ in range(32))
print(reader)
print(admin)
print(password)
PY
  )
  READER_TOKEN=${secrets[0]}
  ADMIN_TOKEN=${secrets[1]}
  NEO4J_PASSWORD=${secrets[2]}
  {
    printf 'KM_IMAGE=%q\n' "$IMAGE"
    printf 'KM_CONTAINER_NAME=%q\n' "duskmantle"
    printf 'KM_AUTH_ENABLED=true\n'
    printf 'KM_READER_TOKEN=%q\n' "$READER_TOKEN"
    printf 'KM_ADMIN_TOKEN=%q\n' "$ADMIN_TOKEN"
    printf 'KM_NEO4J_PASSWORD=%q\n' "$NEO4J_PASSWORD"
    printf 'KM_DATA_DIR=%q\n' "$CONFIG_DIR"
    printf 'KM_REPO_DIR=%q\n' "$DATA_DIR"
  } >"$ENV_FILE"
  echo "Wrote new credentials to $ENV_FILE"
else
  echo "Reusing existing credentials in $ENV_FILE"
fi

set -a
source "$ENV_FILE"
KM_IMAGE="${KM_IMAGE:-$IMAGE}"
set +a

echo "Pulling $KM_IMAGE ..."
docker pull "$KM_IMAGE"

echo "Stopping existing container if present..."
docker rm -f "${KM_CONTAINER_NAME:-duskmantle}" >/dev/null 2>&1 || true

echo "Launching gateway..."
KM_IMAGE="$KM_IMAGE" bin/km-run --detach

echo "Gateway launched. Secrets stored in $ENV_FILE"
echo "Repository content: $DATA_DIR"
echo "State directory:    $CONFIG_DIR"
