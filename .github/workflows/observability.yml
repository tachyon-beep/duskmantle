name: Observability Checks

on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  nightly-health:
    runs-on: ubuntu-latest
    env:
      KM_ADMIN_TOKEN: maintainer-token
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
          npm ci

      - name: Install Playwright browsers
        run: npx playwright install chromium

      - name: Free disk space for Docker build
        run: |
          set -euxo pipefail
          df -h
          sudo rm -rf /usr/share/dotnet || true
          sudo rm -rf /opt/ghc || true
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"/CodeQL || true
          docker system prune -af || true
          df -h

      - name: Build container image
        run: docker build -t duskmantle/km:${{ github.sha }} .

      - name: Launch container
        run: |
          mkdir -p observability-data/reports observability-data/audit
          python - <<'PY'
          import json
          import os
          import sqlite3
          import time

          state_dir = os.path.abspath("observability-data")
          reports_dir = os.path.join(state_dir, "reports")
          audit_dir = os.path.join(state_dir, "audit")
          os.makedirs(reports_dir, exist_ok=True)
          os.makedirs(audit_dir, exist_ok=True)

          coverage = {
              "generated_at": time.time(),
              "missing_artifacts": [],
              "summary": {
                  "artifact_total": 0,
                  "chunk_total": 0,
                  "code_total": 0,
                  "doc_total": 0,
              },
          }
          with open(os.path.join(reports_dir, "coverage_report.json"), "w", encoding="utf-8") as fh:
              json.dump(coverage, fh)

          audit_path = os.path.join(audit_dir, "audit.db")
          conn = sqlite3.connect(audit_path)
          conn.execute("PRAGMA user_version = 0")
          conn.commit()
          conn.close()
          PY
          mkdir -p observability-data
          docker run -d --name km-observability \
            -e KM_ADMIN_TOKEN=$KM_ADMIN_TOKEN \
            -v "$(pwd)"/observability-data:/opt/knowledge/var \
            -v "$(pwd)":/workspace/repo \
            -p 8000:8000 \
            duskmantle/km:${{ github.sha }}

      - name: Wait for readiness
        run: |
          set -euo pipefail
          last=""
          for i in {1..40}; do
            status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/readyz || true)
            last=$status
            if [ "$status" = "200" ]; then
              exit 0
            fi
            sleep 5
          done
          echo "Gateway not ready (last status: $last)" >&2
          docker logs km-observability
          exit 1

      - name: Check health endpoint
        run: |
          set -euo pipefail
          body=$(curl -sS http://localhost:8000/healthz || true)
          if [ -z "$body" ]; then
            echo "healthz returned empty body" >&2
            docker logs km-observability
            exit 1
          fi
          if ! echo "$body" | jq '.' > /tmp/healthz.json; then
            echo "healthz response was not valid JSON" >&2
            printf '%s\n' "$body"
            docker logs km-observability
            exit 1
          fi
          cat /tmp/healthz.json
          status=$(jq -r '.status // empty' /tmp/healthz.json)
          if [ "$status" != "ok" ]; then
            echo "healthz status not ok (status: ${status:-missing})" >&2
            docker logs km-observability
            exit 1
          fi

      - name: Check metrics endpoint
        run: |
          curl -sSf -H "Authorization: Bearer $KM_ADMIN_TOKEN" http://localhost:8000/metrics > metrics.txt
          grep -q 'km_ingest_last_run_status' metrics.txt

      - name: Check coverage endpoint
        run: |
          status=$(curl -s -o coverage.json -w "%{http_code}" -H "Authorization: Bearer $KM_ADMIN_TOKEN" http://localhost:8000/coverage || true)
          if [ "$status" = "200" ]; then
            jq '.summary' coverage.json
          else
            echo "coverage endpoint returned $status (skipping validation)"
          fi

      - name: Check lifecycle history
        run: |
          curl -sSf -H "Authorization: Bearer $KM_ADMIN_TOKEN" "http://localhost:8000/lifecycle/history?limit=3" | jq '.'

      - name: Run Playwright UI smoke tests
        run: |
          npx playwright test

      - name: Tear down
        if: always()
        run: |
          docker logs km-observability || true
          docker rm -f km-observability || true
          sudo rm -rf observability-data
